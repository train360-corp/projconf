/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get status
         * @description Returns a health-check on the server (even if not ready; available as soon as server starts)
         */
        get: operations["getStatusV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/status/ready": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get readiness status
         * @description Returns a readiness health-check on the server
         */
        get: operations["getStatusReadyV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/clients/_self": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get self
         * @description Returns the client object for the currently-authenticated client.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description client object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClientRepresentation"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/clients/secrets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get secrets
         * @description Returns the secrets accessible by the currently-authenticated client.
         */
        get: operations["getClientSecretsV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List projects
         * @description Returns all projects accessible by the client
         */
        get: operations["getProjectsV1"];
        put?: never;
        /**
         * Create project
         * @description Create a new project
         */
        post: operations["createProjectV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{project_id}/environments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List environments
         * @description Returns all environments for a given project.
         */
        get: operations["getEnvironmentsV1"];
        put?: never;
        /**
         * Create environment
         * @description Create a new environment
         */
        post: operations["createEnvironmentV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{project_id}/variables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get varibales
         * @description Get all variables in a project
         */
        get: operations["getVariablesV1"];
        put?: never;
        /**
         * Create variable
         * @description Create a new variable in a project
         */
        post: operations["createVariableV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/_/environments/{environment_id}/clients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get client
         * @description Get all clients in an environment
         */
        get: operations["getClientsV1"];
        put?: never;
        /**
         * Create client
         * @description Create a new client
         */
        post: operations["createClientV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/environments/{environment_id}/secrets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List secrets
         * @description Returns all secrets for a given project environment.
         */
        get: operations["getEnvironmentSecretsV1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ClientRepresentation: {
            /** Format: uuid */
            id: string;
            created_at: string;
            display: string;
            /** Format: uuid */
            environment_id: string;
        };
        Projects: components["schemas"]["Project"][];
        Project: {
            /** Format: uuid */
            id: string;
            display: string;
        };
        Variables: components["schemas"]["Variable"][];
        Variable: {
            description: string;
            /** @description arbitrary generator data payload, based on type */
            generator_data: Record<string, never> | string | number | boolean | unknown[];
            generator_type: components["schemas"]["GeneratorType"];
            /** Format: uuid */
            id: string;
            key: string;
            /** Format: uuid */
            project_id: string;
        };
        Environments: components["schemas"]["Environment"][];
        Environment: {
            id: string;
            display: string;
        };
        Secrets: components["schemas"]["Secret"][];
        /**
         * @description Binding of a Secret to a Variable and an Environment (with nested Project), modeled in a single schema.
         * @example {
         *       "id": "da29223b-8ef3-4b40-92a7-56a924c7e720",
         *       "value": "127.0.0.1",
         *       "variable": {
         *         "id": "bc928af2-58ae-4384-8e84-7d2d91e852b7",
         *         "key": "HOST"
         *       },
         *       "environment": {
         *         "id": "6b74da6e-3690-401d-83a5-a8fe3c10fe94",
         *         "display": "Prod",
         *         "project": {
         *           "id": "94ab1156-5b42-499f-b8aa-92ca45dfa180",
         *           "display": "MVP"
         *         }
         *       }
         *     }
         */
        Secret: {
            /** Format: uuid */
            id: string;
            value: string;
            variable: {
                /** Format: uuid */
                id: string;
                /** @description Variable key/name (e.g., "HOST") */
                key: string;
            };
            environment: {
                /** Format: uuid */
                id: string;
                display: string;
                project: {
                    /** Format: uuid */
                    id: string;
                    display: string;
                };
            };
        };
        ID: {
            /** Format: uuid */
            id: string;
        };
        Error: {
            error: string;
            description: string;
        };
        /** @enum {string} */
        GeneratorType: "STATIC" | "RANDOM";
        StaticGeneratorData: string;
        RandomGeneratorData: {
            length: number;
            letters: boolean;
            numbers: boolean;
            symbols: boolean;
        };
        SecretGeneratorBase: {
            type: components["schemas"]["GeneratorType"];
            data: unknown;
        };
        SecretGeneratorStatic: components["schemas"]["SecretGeneratorBase"] & {
            /** @enum {string} */
            type?: "STATIC";
            data?: components["schemas"]["StaticGeneratorData"];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "STATIC";
        };
        SecretGeneratorRandom: components["schemas"]["SecretGeneratorBase"] & {
            /** @enum {string} */
            type?: "RANDOM";
            data?: components["schemas"]["RandomGeneratorData"];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "RANDOM";
        };
        SecretGenerator: components["schemas"]["SecretGeneratorStatic"] | components["schemas"]["SecretGeneratorRandom"];
    };
    responses: {
        /** @description client object */
        ClientRepresentationResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ClientRepresentation"];
            };
        };
        /** @description Created Client */
        CreateClientResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** Format: uuid */
                    id: string;
                    secret: {
                        /** Format: uuid */
                        id: string;
                        key: string;
                    };
                };
            };
        };
        /** @description Server Status */
        Status: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @description whether required services powering the server are online */
                    services: {
                        /**
                         * @description whether postgres is ready
                         * @default false
                         */
                        postgres: boolean;
                        /**
                         * @description whether postgres is ready
                         * @default false
                         */
                        postgrest: boolean;
                    };
                    /** @description server status */
                    server: {
                        /**
                         * @description version of ProjConf
                         * @example 1.2.3
                         */
                        version: string;
                        /**
                         * @description whether the server is ready to accept connections
                         * @default false
                         */
                        is_ready: boolean;
                    };
                };
            };
        };
        /** @description Ready */
        Ready: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /**
                     * @description ready
                     * @default ready
                     */
                    msg: string;
                };
            };
        };
        /** @description Bad RequestError */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Internal Server Error */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unauthorized */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Forbidden */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Service Unavailable */
        ServiceUnavailable: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: {
        /** @description Create Variable Request Body */
        CreateVariableRequestBody: {
            content: {
                "application/json": {
                    /** @description the key in the environment */
                    key: string;
                    generator: components["schemas"]["SecretGenerator"];
                };
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getStatusV1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Status"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getStatusReadyV1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["Ready"];
            503: components["responses"]["ServiceUnavailable"];
        };
    };
    getClientSecretsV1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description secrets object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Secrets"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getProjectsV1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of projects. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Projects"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createProjectV1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description project name (must be unique) */
                    name: string;
                };
            };
        };
        responses: {
            /** @description Project Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ID"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getEnvironmentsV1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of environments. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Environments"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createEnvironmentV1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description project name (must be unique) */
                    name: string;
                };
            };
        };
        responses: {
            /** @description Environment Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ID"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getVariablesV1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of variables. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Variables"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createVariableV1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["CreateVariableRequestBody"];
        responses: {
            /** @description Variable Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ID"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getClientsV1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the environment. */
                environment_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of clients */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClientRepresentation"][];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createClientV1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the environment. */
                environment_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description client name */
                    name: string;
                };
            };
        };
        responses: {
            201: components["responses"]["CreateClientResponse"];
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getEnvironmentSecretsV1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the environment. */
                environment_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of secrets. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Secrets"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalServerError"];
        };
    };
}
