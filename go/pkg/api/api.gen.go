// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for GeneratorType.
const (
	GeneratorTypeRANDOM GeneratorType = "RANDOM"
	GeneratorTypeSTATIC GeneratorType = "STATIC"
)

// Defines values for SecretGeneratorRandomType.
const (
	SecretGeneratorRandomTypeRANDOM SecretGeneratorRandomType = "RANDOM"
)

// Defines values for SecretGeneratorStaticType.
const (
	STATIC SecretGeneratorStaticType = "STATIC"
)

// ClientRepresentation defines model for ClientRepresentation.
type ClientRepresentation struct {
	CreatedAt     string             `json:"created_at"`
	Display       string             `json:"display"`
	EnvironmentId openapi_types.UUID `json:"environment_id"`
	Id            openapi_types.UUID `json:"id"`
}

// Environment defines model for Environment.
type Environment struct {
	Display string `json:"display"`
	Id      string `json:"id"`
}

// Environments defines model for Environments.
type Environments = []Environment

// Error defines model for Error.
type Error struct {
	Description string `json:"description"`
	Error       string `json:"error"`
}

// GeneratorType defines model for GeneratorType.
type GeneratorType string

// ID defines model for ID.
type ID struct {
	Id openapi_types.UUID `json:"id"`
}

// Project defines model for Project.
type Project struct {
	Display string             `json:"display"`
	Id      openapi_types.UUID `json:"id"`
}

// Projects defines model for Projects.
type Projects = []Project

// RandomGeneratorData defines model for RandomGeneratorData.
type RandomGeneratorData struct {
	Length  float32 `json:"length"`
	Letters bool    `json:"letters"`
	Numbers bool    `json:"numbers"`
	Symbols bool    `json:"symbols"`
}

// Secret Binding of a Secret to a Variable and an Environment (with nested Project), modeled in a single schema.
type Secret struct {
	Environment struct {
		Display string             `json:"display"`
		Id      openapi_types.UUID `json:"id"`
		Project struct {
			Display string             `json:"display"`
			Id      openapi_types.UUID `json:"id"`
		} `json:"project"`
	} `json:"environment"`
	Id       openapi_types.UUID `json:"id"`
	Value    string             `json:"value"`
	Variable struct {
		Id openapi_types.UUID `json:"id"`

		// Key Variable key/name (e.g., "HOST")
		Key string `json:"key"`
	} `json:"variable"`
}

// SecretGenerator defines model for SecretGenerator.
type SecretGenerator struct {
	union json.RawMessage
}

// SecretGeneratorBase defines model for SecretGeneratorBase.
type SecretGeneratorBase struct {
	Data interface{}   `json:"data"`
	Type GeneratorType `json:"type"`
}

// SecretGeneratorRandom defines model for SecretGeneratorRandom.
type SecretGeneratorRandom struct {
	Data RandomGeneratorData       `json:"data"`
	Type SecretGeneratorRandomType `json:"type"`
}

// SecretGeneratorRandomType defines model for SecretGeneratorRandom.Type.
type SecretGeneratorRandomType string

// SecretGeneratorStatic defines model for SecretGeneratorStatic.
type SecretGeneratorStatic struct {
	Data StaticGeneratorData       `json:"data"`
	Type SecretGeneratorStaticType `json:"type"`
}

// SecretGeneratorStaticType defines model for SecretGeneratorStatic.Type.
type SecretGeneratorStaticType string

// Secrets defines model for Secrets.
type Secrets = []Secret

// StaticGeneratorData defines model for StaticGeneratorData.
type StaticGeneratorData = string

// Variable defines model for Variable.
type Variable struct {
	Description string `json:"description"`

	// GeneratorData arbitrary generator data payload, based on type
	GeneratorData Variable_GeneratorData `json:"generator_data"`
	GeneratorType GeneratorType          `json:"generator_type"`
	Id            openapi_types.UUID     `json:"id"`
	Key           string                 `json:"key"`
	ProjectId     openapi_types.UUID     `json:"project_id"`
}

// VariableGeneratorData0 defines model for .
type VariableGeneratorData0 = map[string]interface{}

// VariableGeneratorData1 defines model for .
type VariableGeneratorData1 = string

// VariableGeneratorData2 defines model for .
type VariableGeneratorData2 = float32

// VariableGeneratorData3 defines model for .
type VariableGeneratorData3 = bool

// VariableGeneratorData4 defines model for .
type VariableGeneratorData4 = []interface{}

// Variable_GeneratorData arbitrary generator data payload, based on type
type Variable_GeneratorData struct {
	union json.RawMessage
}

// Variables defines model for Variables.
type Variables = []Variable

// BadRequest defines model for BadRequest.
type BadRequest = Error

// ClientRepresentationResponse defines model for ClientRepresentationResponse.
type ClientRepresentationResponse = ClientRepresentation

// CreateClientResponse defines model for CreateClientResponse.
type CreateClientResponse struct {
	Id     openapi_types.UUID `json:"id"`
	Secret struct {
		Id  openapi_types.UUID `json:"id"`
		Key string             `json:"key"`
	} `json:"secret"`
}

// Forbidden defines model for Forbidden.
type Forbidden = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// Ready defines model for Ready.
type Ready struct {
	// Msg ready
	Msg string `json:"msg"`
}

// ServiceUnavailable defines model for ServiceUnavailable.
type ServiceUnavailable = Error

// Status defines model for Status.
type Status struct {
	// Server server status
	Server struct {
		// IsReady whether the server is ready to accept connections
		IsReady bool `json:"is_ready"`

		// Version version of ProjConf
		Version string `json:"version"`
	} `json:"server"`

	// Services whether required services powering the server are online
	Services struct {
		// Postgres whether postgres is ready
		Postgres bool `json:"postgres"`

		// Postgrest whether postgres is ready
		Postgrest bool `json:"postgrest"`
	} `json:"services"`
}

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// CreateVariableRequestBody defines model for CreateVariableRequestBody.
type CreateVariableRequestBody struct {
	Generator SecretGenerator `json:"generator"`

	// Key the key in the environment
	Key string `json:"key"`
}

// CreateProjectV1JSONBody defines parameters for CreateProjectV1.
type CreateProjectV1JSONBody struct {
	// Name project name (must be unique)
	Name string `json:"name"`
}

// CreateClientV1JSONBody defines parameters for CreateClientV1.
type CreateClientV1JSONBody struct {
	// Name client name
	Name string `json:"name"`
}

// CreateEnvironmentV1JSONBody defines parameters for CreateEnvironmentV1.
type CreateEnvironmentV1JSONBody struct {
	// Name project name (must be unique)
	Name string `json:"name"`
}

// CreateVariableV1JSONBody defines parameters for CreateVariableV1.
type CreateVariableV1JSONBody struct {
	Generator SecretGenerator `json:"generator"`

	// Key the key in the environment
	Key string `json:"key"`
}

// CreateProjectV1JSONRequestBody defines body for CreateProjectV1 for application/json ContentType.
type CreateProjectV1JSONRequestBody CreateProjectV1JSONBody

// CreateClientV1JSONRequestBody defines body for CreateClientV1 for application/json ContentType.
type CreateClientV1JSONRequestBody CreateClientV1JSONBody

// CreateEnvironmentV1JSONRequestBody defines body for CreateEnvironmentV1 for application/json ContentType.
type CreateEnvironmentV1JSONRequestBody CreateEnvironmentV1JSONBody

// CreateVariableV1JSONRequestBody defines body for CreateVariableV1 for application/json ContentType.
type CreateVariableV1JSONRequestBody CreateVariableV1JSONBody

// AsSecretGeneratorStatic returns the union data inside the SecretGenerator as a SecretGeneratorStatic
func (t SecretGenerator) AsSecretGeneratorStatic() (SecretGeneratorStatic, error) {
	var body SecretGeneratorStatic
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSecretGeneratorStatic overwrites any union data inside the SecretGenerator as the provided SecretGeneratorStatic
func (t *SecretGenerator) FromSecretGeneratorStatic(v SecretGeneratorStatic) error {
	v.Type = "STATIC"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSecretGeneratorStatic performs a merge with any union data inside the SecretGenerator, using the provided SecretGeneratorStatic
func (t *SecretGenerator) MergeSecretGeneratorStatic(v SecretGeneratorStatic) error {
	v.Type = "STATIC"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSecretGeneratorRandom returns the union data inside the SecretGenerator as a SecretGeneratorRandom
func (t SecretGenerator) AsSecretGeneratorRandom() (SecretGeneratorRandom, error) {
	var body SecretGeneratorRandom
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSecretGeneratorRandom overwrites any union data inside the SecretGenerator as the provided SecretGeneratorRandom
func (t *SecretGenerator) FromSecretGeneratorRandom(v SecretGeneratorRandom) error {
	v.Type = "RANDOM"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSecretGeneratorRandom performs a merge with any union data inside the SecretGenerator, using the provided SecretGeneratorRandom
func (t *SecretGenerator) MergeSecretGeneratorRandom(v SecretGeneratorRandom) error {
	v.Type = "RANDOM"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SecretGenerator) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t SecretGenerator) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "RANDOM":
		return t.AsSecretGeneratorRandom()
	case "STATIC":
		return t.AsSecretGeneratorStatic()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t SecretGenerator) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SecretGenerator) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVariableGeneratorData0 returns the union data inside the Variable_GeneratorData as a VariableGeneratorData0
func (t Variable_GeneratorData) AsVariableGeneratorData0() (VariableGeneratorData0, error) {
	var body VariableGeneratorData0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVariableGeneratorData0 overwrites any union data inside the Variable_GeneratorData as the provided VariableGeneratorData0
func (t *Variable_GeneratorData) FromVariableGeneratorData0(v VariableGeneratorData0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVariableGeneratorData0 performs a merge with any union data inside the Variable_GeneratorData, using the provided VariableGeneratorData0
func (t *Variable_GeneratorData) MergeVariableGeneratorData0(v VariableGeneratorData0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVariableGeneratorData1 returns the union data inside the Variable_GeneratorData as a VariableGeneratorData1
func (t Variable_GeneratorData) AsVariableGeneratorData1() (VariableGeneratorData1, error) {
	var body VariableGeneratorData1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVariableGeneratorData1 overwrites any union data inside the Variable_GeneratorData as the provided VariableGeneratorData1
func (t *Variable_GeneratorData) FromVariableGeneratorData1(v VariableGeneratorData1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVariableGeneratorData1 performs a merge with any union data inside the Variable_GeneratorData, using the provided VariableGeneratorData1
func (t *Variable_GeneratorData) MergeVariableGeneratorData1(v VariableGeneratorData1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVariableGeneratorData2 returns the union data inside the Variable_GeneratorData as a VariableGeneratorData2
func (t Variable_GeneratorData) AsVariableGeneratorData2() (VariableGeneratorData2, error) {
	var body VariableGeneratorData2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVariableGeneratorData2 overwrites any union data inside the Variable_GeneratorData as the provided VariableGeneratorData2
func (t *Variable_GeneratorData) FromVariableGeneratorData2(v VariableGeneratorData2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVariableGeneratorData2 performs a merge with any union data inside the Variable_GeneratorData, using the provided VariableGeneratorData2
func (t *Variable_GeneratorData) MergeVariableGeneratorData2(v VariableGeneratorData2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVariableGeneratorData3 returns the union data inside the Variable_GeneratorData as a VariableGeneratorData3
func (t Variable_GeneratorData) AsVariableGeneratorData3() (VariableGeneratorData3, error) {
	var body VariableGeneratorData3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVariableGeneratorData3 overwrites any union data inside the Variable_GeneratorData as the provided VariableGeneratorData3
func (t *Variable_GeneratorData) FromVariableGeneratorData3(v VariableGeneratorData3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVariableGeneratorData3 performs a merge with any union data inside the Variable_GeneratorData, using the provided VariableGeneratorData3
func (t *Variable_GeneratorData) MergeVariableGeneratorData3(v VariableGeneratorData3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVariableGeneratorData4 returns the union data inside the Variable_GeneratorData as a VariableGeneratorData4
func (t Variable_GeneratorData) AsVariableGeneratorData4() (VariableGeneratorData4, error) {
	var body VariableGeneratorData4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVariableGeneratorData4 overwrites any union data inside the Variable_GeneratorData as the provided VariableGeneratorData4
func (t *Variable_GeneratorData) FromVariableGeneratorData4(v VariableGeneratorData4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVariableGeneratorData4 performs a merge with any union data inside the Variable_GeneratorData, using the provided VariableGeneratorData4
func (t *Variable_GeneratorData) MergeVariableGeneratorData4(v VariableGeneratorData4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Variable_GeneratorData) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Variable_GeneratorData) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV1ClientsSelf request
	GetV1ClientsSelf(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientSecretsV1 request
	GetClientSecretsV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironmentSecretsV1 request
	GetEnvironmentSecretsV1(ctx context.Context, environmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectsV1 request
	GetProjectsV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProjectV1WithBody request with any body
	CreateProjectV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProjectV1(ctx context.Context, body CreateProjectV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientsV1 request
	GetClientsV1(ctx context.Context, environmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateClientV1WithBody request with any body
	CreateClientV1WithBody(ctx context.Context, environmentId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateClientV1(ctx context.Context, environmentId openapi_types.UUID, body CreateClientV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironmentsV1 request
	GetEnvironmentsV1(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnvironmentV1WithBody request with any body
	CreateEnvironmentV1WithBody(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEnvironmentV1(ctx context.Context, projectId openapi_types.UUID, body CreateEnvironmentV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVariablesV1 request
	GetVariablesV1(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVariableV1WithBody request with any body
	CreateVariableV1WithBody(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVariableV1(ctx context.Context, projectId openapi_types.UUID, body CreateVariableV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusV1 request
	GetStatusV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusReadyV1 request
	GetStatusReadyV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetV1ClientsSelf(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ClientsSelfRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientSecretsV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientSecretsV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironmentSecretsV1(ctx context.Context, environmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentSecretsV1Request(c.Server, environmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectsV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectV1(ctx context.Context, body CreateProjectV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientsV1(ctx context.Context, environmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientsV1Request(c.Server, environmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClientV1WithBody(ctx context.Context, environmentId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClientV1RequestWithBody(c.Server, environmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClientV1(ctx context.Context, environmentId openapi_types.UUID, body CreateClientV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateClientV1Request(c.Server, environmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironmentsV1(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentsV1Request(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentV1WithBody(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentV1RequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentV1(ctx context.Context, projectId openapi_types.UUID, body CreateEnvironmentV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentV1Request(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVariablesV1(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVariablesV1Request(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVariableV1WithBody(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVariableV1RequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVariableV1(ctx context.Context, projectId openapi_types.UUID, body CreateVariableV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVariableV1Request(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusReadyV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusReadyV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetV1ClientsSelfRequest generates requests for GetV1ClientsSelf
func NewGetV1ClientsSelfRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clients/_self")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientSecretsV1Request generates requests for GetClientSecretsV1
func NewGetClientSecretsV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clients/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentSecretsV1Request generates requests for GetEnvironmentSecretsV1
func NewGetEnvironmentSecretsV1Request(server string, environmentId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "environment_id", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s/secrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectsV1Request generates requests for GetProjectsV1
func NewGetProjectsV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProjectV1Request calls the generic CreateProjectV1 builder with application/json body
func NewCreateProjectV1Request(server string, body CreateProjectV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProjectV1RequestWithBody(server, "application/json", bodyReader)
}

// NewCreateProjectV1RequestWithBody generates requests for CreateProjectV1 with any type of body
func NewCreateProjectV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClientsV1Request generates requests for GetClientsV1
func NewGetClientsV1Request(server string, environmentId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "environment_id", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/_/environments/%s/clients", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateClientV1Request calls the generic CreateClientV1 builder with application/json body
func NewCreateClientV1Request(server string, environmentId openapi_types.UUID, body CreateClientV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateClientV1RequestWithBody(server, environmentId, "application/json", bodyReader)
}

// NewCreateClientV1RequestWithBody generates requests for CreateClientV1 with any type of body
func NewCreateClientV1RequestWithBody(server string, environmentId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "environment_id", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/_/environments/%s/clients", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEnvironmentsV1Request generates requests for GetEnvironmentsV1
func NewGetEnvironmentsV1Request(server string, projectId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/environments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEnvironmentV1Request calls the generic CreateEnvironmentV1 builder with application/json body
func NewCreateEnvironmentV1Request(server string, projectId openapi_types.UUID, body CreateEnvironmentV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEnvironmentV1RequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewCreateEnvironmentV1RequestWithBody generates requests for CreateEnvironmentV1 with any type of body
func NewCreateEnvironmentV1RequestWithBody(server string, projectId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/environments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVariablesV1Request generates requests for GetVariablesV1
func NewGetVariablesV1Request(server string, projectId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/variables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateVariableV1Request calls the generic CreateVariableV1 builder with application/json body
func NewCreateVariableV1Request(server string, projectId openapi_types.UUID, body CreateVariableV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVariableV1RequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewCreateVariableV1RequestWithBody generates requests for CreateVariableV1 with any type of body
func NewCreateVariableV1RequestWithBody(server string, projectId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/variables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatusV1Request generates requests for GetStatusV1
func NewGetStatusV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusReadyV1Request generates requests for GetStatusReadyV1
func NewGetStatusReadyV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/status/ready")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV1ClientsSelfWithResponse request
	GetV1ClientsSelfWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1ClientsSelfResponse, error)

	// GetClientSecretsV1WithResponse request
	GetClientSecretsV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetClientSecretsV1Response, error)

	// GetEnvironmentSecretsV1WithResponse request
	GetEnvironmentSecretsV1WithResponse(ctx context.Context, environmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetEnvironmentSecretsV1Response, error)

	// GetProjectsV1WithResponse request
	GetProjectsV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProjectsV1Response, error)

	// CreateProjectV1WithBodyWithResponse request with any body
	CreateProjectV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectV1Response, error)

	CreateProjectV1WithResponse(ctx context.Context, body CreateProjectV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectV1Response, error)

	// GetClientsV1WithResponse request
	GetClientsV1WithResponse(ctx context.Context, environmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetClientsV1Response, error)

	// CreateClientV1WithBodyWithResponse request with any body
	CreateClientV1WithBodyWithResponse(ctx context.Context, environmentId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClientV1Response, error)

	CreateClientV1WithResponse(ctx context.Context, environmentId openapi_types.UUID, body CreateClientV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClientV1Response, error)

	// GetEnvironmentsV1WithResponse request
	GetEnvironmentsV1WithResponse(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetEnvironmentsV1Response, error)

	// CreateEnvironmentV1WithBodyWithResponse request with any body
	CreateEnvironmentV1WithBodyWithResponse(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentV1Response, error)

	CreateEnvironmentV1WithResponse(ctx context.Context, projectId openapi_types.UUID, body CreateEnvironmentV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentV1Response, error)

	// GetVariablesV1WithResponse request
	GetVariablesV1WithResponse(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetVariablesV1Response, error)

	// CreateVariableV1WithBodyWithResponse request with any body
	CreateVariableV1WithBodyWithResponse(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVariableV1Response, error)

	CreateVariableV1WithResponse(ctx context.Context, projectId openapi_types.UUID, body CreateVariableV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVariableV1Response, error)

	// GetStatusV1WithResponse request
	GetStatusV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusV1Response, error)

	// GetStatusReadyV1WithResponse request
	GetStatusReadyV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusReadyV1Response, error)
}

type GetV1ClientsSelfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientRepresentation
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetV1ClientsSelfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ClientsSelfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientSecretsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Secrets
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetClientSecretsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientSecretsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentSecretsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Secrets
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentSecretsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentSecretsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Projects
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetProjectsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProjectV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ID
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CreateProjectV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProjectV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClientRepresentation
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetClientsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateClientV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateClientResponse
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CreateClientV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateClientV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentsV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Environments
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentsV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentsV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvironmentV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ID
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVariablesV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Variables
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetVariablesV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVariablesV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVariableV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ID
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CreateVariableV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVariableV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetStatusV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusReadyV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ready
	JSON503      *ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetStatusReadyV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusReadyV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV1ClientsSelfWithResponse request returning *GetV1ClientsSelfResponse
func (c *ClientWithResponses) GetV1ClientsSelfWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1ClientsSelfResponse, error) {
	rsp, err := c.GetV1ClientsSelf(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ClientsSelfResponse(rsp)
}

// GetClientSecretsV1WithResponse request returning *GetClientSecretsV1Response
func (c *ClientWithResponses) GetClientSecretsV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetClientSecretsV1Response, error) {
	rsp, err := c.GetClientSecretsV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientSecretsV1Response(rsp)
}

// GetEnvironmentSecretsV1WithResponse request returning *GetEnvironmentSecretsV1Response
func (c *ClientWithResponses) GetEnvironmentSecretsV1WithResponse(ctx context.Context, environmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetEnvironmentSecretsV1Response, error) {
	rsp, err := c.GetEnvironmentSecretsV1(ctx, environmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentSecretsV1Response(rsp)
}

// GetProjectsV1WithResponse request returning *GetProjectsV1Response
func (c *ClientWithResponses) GetProjectsV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProjectsV1Response, error) {
	rsp, err := c.GetProjectsV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsV1Response(rsp)
}

// CreateProjectV1WithBodyWithResponse request with arbitrary body returning *CreateProjectV1Response
func (c *ClientWithResponses) CreateProjectV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectV1Response, error) {
	rsp, err := c.CreateProjectV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectV1Response(rsp)
}

func (c *ClientWithResponses) CreateProjectV1WithResponse(ctx context.Context, body CreateProjectV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectV1Response, error) {
	rsp, err := c.CreateProjectV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectV1Response(rsp)
}

// GetClientsV1WithResponse request returning *GetClientsV1Response
func (c *ClientWithResponses) GetClientsV1WithResponse(ctx context.Context, environmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetClientsV1Response, error) {
	rsp, err := c.GetClientsV1(ctx, environmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientsV1Response(rsp)
}

// CreateClientV1WithBodyWithResponse request with arbitrary body returning *CreateClientV1Response
func (c *ClientWithResponses) CreateClientV1WithBodyWithResponse(ctx context.Context, environmentId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateClientV1Response, error) {
	rsp, err := c.CreateClientV1WithBody(ctx, environmentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClientV1Response(rsp)
}

func (c *ClientWithResponses) CreateClientV1WithResponse(ctx context.Context, environmentId openapi_types.UUID, body CreateClientV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CreateClientV1Response, error) {
	rsp, err := c.CreateClientV1(ctx, environmentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateClientV1Response(rsp)
}

// GetEnvironmentsV1WithResponse request returning *GetEnvironmentsV1Response
func (c *ClientWithResponses) GetEnvironmentsV1WithResponse(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetEnvironmentsV1Response, error) {
	rsp, err := c.GetEnvironmentsV1(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentsV1Response(rsp)
}

// CreateEnvironmentV1WithBodyWithResponse request with arbitrary body returning *CreateEnvironmentV1Response
func (c *ClientWithResponses) CreateEnvironmentV1WithBodyWithResponse(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentV1Response, error) {
	rsp, err := c.CreateEnvironmentV1WithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentV1Response(rsp)
}

func (c *ClientWithResponses) CreateEnvironmentV1WithResponse(ctx context.Context, projectId openapi_types.UUID, body CreateEnvironmentV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentV1Response, error) {
	rsp, err := c.CreateEnvironmentV1(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentV1Response(rsp)
}

// GetVariablesV1WithResponse request returning *GetVariablesV1Response
func (c *ClientWithResponses) GetVariablesV1WithResponse(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetVariablesV1Response, error) {
	rsp, err := c.GetVariablesV1(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVariablesV1Response(rsp)
}

// CreateVariableV1WithBodyWithResponse request with arbitrary body returning *CreateVariableV1Response
func (c *ClientWithResponses) CreateVariableV1WithBodyWithResponse(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVariableV1Response, error) {
	rsp, err := c.CreateVariableV1WithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVariableV1Response(rsp)
}

func (c *ClientWithResponses) CreateVariableV1WithResponse(ctx context.Context, projectId openapi_types.UUID, body CreateVariableV1JSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVariableV1Response, error) {
	rsp, err := c.CreateVariableV1(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVariableV1Response(rsp)
}

// GetStatusV1WithResponse request returning *GetStatusV1Response
func (c *ClientWithResponses) GetStatusV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusV1Response, error) {
	rsp, err := c.GetStatusV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusV1Response(rsp)
}

// GetStatusReadyV1WithResponse request returning *GetStatusReadyV1Response
func (c *ClientWithResponses) GetStatusReadyV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusReadyV1Response, error) {
	rsp, err := c.GetStatusReadyV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusReadyV1Response(rsp)
}

// ParseGetV1ClientsSelfResponse parses an HTTP response from a GetV1ClientsSelfWithResponse call
func ParseGetV1ClientsSelfResponse(rsp *http.Response) (*GetV1ClientsSelfResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ClientsSelfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetClientSecretsV1Response parses an HTTP response from a GetClientSecretsV1WithResponse call
func ParseGetClientSecretsV1Response(rsp *http.Response) (*GetClientSecretsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientSecretsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Secrets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentSecretsV1Response parses an HTTP response from a GetEnvironmentSecretsV1WithResponse call
func ParseGetEnvironmentSecretsV1Response(rsp *http.Response) (*GetEnvironmentSecretsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentSecretsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Secrets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProjectsV1Response parses an HTTP response from a GetProjectsV1WithResponse call
func ParseGetProjectsV1Response(rsp *http.Response) (*GetProjectsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Projects
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateProjectV1Response parses an HTTP response from a CreateProjectV1WithResponse call
func ParseCreateProjectV1Response(rsp *http.Response) (*CreateProjectV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProjectV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetClientsV1Response parses an HTTP response from a GetClientsV1WithResponse call
func ParseGetClientsV1Response(rsp *http.Response) (*GetClientsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClientRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateClientV1Response parses an HTTP response from a CreateClientV1WithResponse call
func ParseCreateClientV1Response(rsp *http.Response) (*CreateClientV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateClientV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateClientResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentsV1Response parses an HTTP response from a GetEnvironmentsV1WithResponse call
func ParseGetEnvironmentsV1Response(rsp *http.Response) (*GetEnvironmentsV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentsV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Environments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateEnvironmentV1Response parses an HTTP response from a CreateEnvironmentV1WithResponse call
func ParseCreateEnvironmentV1Response(rsp *http.Response) (*CreateEnvironmentV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetVariablesV1Response parses an HTTP response from a GetVariablesV1WithResponse call
func ParseGetVariablesV1Response(rsp *http.Response) (*GetVariablesV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVariablesV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Variables
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateVariableV1Response parses an HTTP response from a CreateVariableV1WithResponse call
func ParseCreateVariableV1Response(rsp *http.Response) (*CreateVariableV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateVariableV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetStatusV1Response parses an HTTP response from a GetStatusV1WithResponse call
func ParseGetStatusV1Response(rsp *http.Response) (*GetStatusV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetStatusReadyV1Response parses an HTTP response from a GetStatusReadyV1WithResponse call
func ParseGetStatusReadyV1Response(rsp *http.Response) (*GetStatusReadyV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusReadyV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ready
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get self
	// (GET /v1/clients/_self)
	GetV1ClientsSelf(c *gin.Context)
	// Get secrets
	// (GET /v1/clients/secrets)
	GetClientSecretsV1(c *gin.Context)
	// List secrets
	// (GET /v1/environments/{environment_id}/secrets)
	GetEnvironmentSecretsV1(c *gin.Context, environmentId openapi_types.UUID)
	// List projects
	// (GET /v1/projects)
	GetProjectsV1(c *gin.Context)
	// Create project
	// (POST /v1/projects)
	CreateProjectV1(c *gin.Context)
	// Get client
	// (GET /v1/projects/_/environments/{environment_id}/clients)
	GetClientsV1(c *gin.Context, environmentId openapi_types.UUID)
	// Create client
	// (POST /v1/projects/_/environments/{environment_id}/clients)
	CreateClientV1(c *gin.Context, environmentId openapi_types.UUID)
	// List environments
	// (GET /v1/projects/{project_id}/environments)
	GetEnvironmentsV1(c *gin.Context, projectId openapi_types.UUID)
	// Create environment
	// (POST /v1/projects/{project_id}/environments)
	CreateEnvironmentV1(c *gin.Context, projectId openapi_types.UUID)
	// Get varibales
	// (GET /v1/projects/{project_id}/variables)
	GetVariablesV1(c *gin.Context, projectId openapi_types.UUID)
	// Create variable
	// (POST /v1/projects/{project_id}/variables)
	CreateVariableV1(c *gin.Context, projectId openapi_types.UUID)
	// Get status
	// (GET /v1/status)
	GetStatusV1(c *gin.Context)
	// Get readiness status
	// (GET /v1/status/ready)
	GetStatusReadyV1(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetV1ClientsSelf operation middleware
func (siw *ServerInterfaceWrapper) GetV1ClientsSelf(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1ClientsSelf(c)
}

// GetClientSecretsV1 operation middleware
func (siw *ServerInterfaceWrapper) GetClientSecretsV1(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetClientSecretsV1(c)
}

// GetEnvironmentSecretsV1 operation middleware
func (siw *ServerInterfaceWrapper) GetEnvironmentSecretsV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "environment_id" -------------
	var environmentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "environment_id", c.Param("environment_id"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environment_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEnvironmentSecretsV1(c, environmentId)
}

// GetProjectsV1 operation middleware
func (siw *ServerInterfaceWrapper) GetProjectsV1(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProjectsV1(c)
}

// CreateProjectV1 operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectV1(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateProjectV1(c)
}

// GetClientsV1 operation middleware
func (siw *ServerInterfaceWrapper) GetClientsV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "environment_id" -------------
	var environmentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "environment_id", c.Param("environment_id"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environment_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetClientsV1(c, environmentId)
}

// CreateClientV1 operation middleware
func (siw *ServerInterfaceWrapper) CreateClientV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "environment_id" -------------
	var environmentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "environment_id", c.Param("environment_id"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environment_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateClientV1(c, environmentId)
}

// GetEnvironmentsV1 operation middleware
func (siw *ServerInterfaceWrapper) GetEnvironmentsV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEnvironmentsV1(c, projectId)
}

// CreateEnvironmentV1 operation middleware
func (siw *ServerInterfaceWrapper) CreateEnvironmentV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateEnvironmentV1(c, projectId)
}

// GetVariablesV1 operation middleware
func (siw *ServerInterfaceWrapper) GetVariablesV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetVariablesV1(c, projectId)
}

// CreateVariableV1 operation middleware
func (siw *ServerInterfaceWrapper) CreateVariableV1(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateVariableV1(c, projectId)
}

// GetStatusV1 operation middleware
func (siw *ServerInterfaceWrapper) GetStatusV1(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStatusV1(c)
}

// GetStatusReadyV1 operation middleware
func (siw *ServerInterfaceWrapper) GetStatusReadyV1(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStatusReadyV1(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/clients/_self", wrapper.GetV1ClientsSelf)
	router.GET(options.BaseURL+"/v1/clients/secrets", wrapper.GetClientSecretsV1)
	router.GET(options.BaseURL+"/v1/environments/:environment_id/secrets", wrapper.GetEnvironmentSecretsV1)
	router.GET(options.BaseURL+"/v1/projects", wrapper.GetProjectsV1)
	router.POST(options.BaseURL+"/v1/projects", wrapper.CreateProjectV1)
	router.GET(options.BaseURL+"/v1/projects/_/environments/:environment_id/clients", wrapper.GetClientsV1)
	router.POST(options.BaseURL+"/v1/projects/_/environments/:environment_id/clients", wrapper.CreateClientV1)
	router.GET(options.BaseURL+"/v1/projects/:project_id/environments", wrapper.GetEnvironmentsV1)
	router.POST(options.BaseURL+"/v1/projects/:project_id/environments", wrapper.CreateEnvironmentV1)
	router.GET(options.BaseURL+"/v1/projects/:project_id/variables", wrapper.GetVariablesV1)
	router.POST(options.BaseURL+"/v1/projects/:project_id/variables", wrapper.CreateVariableV1)
	router.GET(options.BaseURL+"/v1/status", wrapper.GetStatusV1)
	router.GET(options.BaseURL+"/v1/status/ready", wrapper.GetStatusReadyV1)
}
