openapi: 3.0.0
info:
  title: ProjConf API
  version: 1.0.0
  description: REST-ful API for interacting with a ProjConf server-instance

tags:
  - name: health
    description: status-check endpoints

  - name: clients
    description: endpoints to manage API `Client` objects

  - name: projects
    description: endpoints to manage `Project` objects

  - name: environments
    description: endpoints to manage `Environment` objects

  - name: variables
    description: endpoints to manage `Variable` objects

paths:

  ############################
  #          HEALTH          #
  ############################

  /v1/status:
    get:
      tags: [ health ]
      operationId: getStatusV1
      summary: Get status
      description: Returns a health-check on the server (even if not ready; available as soon as server starts)
      responses:
        '200': { $ref: '#/components/responses/Status' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /v1/status/ready:
    get:
      tags: [ health ]
      operationId: getStatusReadyV1
      summary: Get readiness status
      description: Returns a readiness health-check on the server
      responses:
        '200': { $ref: '#/components/responses/Ready' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  #############################
  #          CLIENTS          #
  #############################

  /v1/clients/_self:
    get:
      tags: [ clients ]
      summary: Get self
      description: Returns the client object for the currently-authenticated client.
      responses:
        '200':
          description: client object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientObject'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /v1/clients/secrets:
    get:
      operationId: getClientSecretsV1
      tags: [ clients ]
      summary: Get secrets
      description: Returns the secrets accessible by the currently-authenticated client.
      responses:
        '200':
          description: secrets object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secrets'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  ##############################
  #          PROJECTS          #
  ##############################

  /v1/projects:
    get:
      operationId: getProjectsV1
      tags: [ projects ]
      summary: List projects
      description: Returns all projects accessible by the client
      responses:
        '200':
          description: A list of projects.
          content: { application/json: { schema: { $ref: '#/components/schemas/Projects' } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }
    post:
      operationId: createProjectV1
      tags: [ projects ]
      summary: Create project
      description: Create a new project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: project name (must be unique)
                  pattern: ^[[:alnum:] _]+$
                  example: Shiny New MVP
                  minLength: 1
              required: [ name ]
      responses:
        '201': { $ref: '#/components/responses/IDResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /v1/projects/{project_id}:
    get:
      operationId: getProjectV1
      tags: [ projects ]
      summary: Get Project
      description: Get a project by its ID
      parameters:
        - name: project_id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/ID' }
      responses:
        '200':
          description: the Project object matching `project_id`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectObject"
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }
    delete:
      operationId: deleteProjectV1
      tags: [ projects ]
      summary: Delete Project
      description: Delete a project by its ID
      parameters:
        - name: project_id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/ID' }
      responses:
        '200': { $ref: '#/components/responses/SuccessResponse' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  ##################################
  #          ENVIRONMENTS          #
  ##################################

  /v1/projects/{project_id}/environments:
    get:
      operationId: getEnvironmentsV1
      tags: [ environments ]
      summary: List environments
      description: Returns all environments for a given project.
      parameters:
        - name: project_id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/ID' }
      responses:
        '200':
          description: A list of environments.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Environments"
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }
    post:
      operationId: createEnvironmentV1
      tags: [ environments ]
      summary: Create environment
      description: Create a new environment
      parameters:
        - name: project_id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/ID' }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: environment name (must be unique)
                  pattern: ^[[:alnum:] _]+$
                  minLength: 1
                  example: Prod
              required:
                - name
      responses:
        '201': { $ref: '#/components/responses/IDResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /v1/environments/{environment_id}:
    get:
      operationId: getEnvironmentV1
      tags: [ environments ]
      summary: Get Environment
      description: Get an environment by its ID
      parameters:
        - name: environment_id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/ID' }
      responses:
        '200':
          description: the Environment object matching `id`
          content: { application/json: { schema: { $ref: "#/components/schemas/EnvironmentObject" } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }
    delete:
      operationId: deleteEnvironmentV1
      tags: [ environments ]
      summary: Delete Environment
      description: Delete an environment by its ID
      parameters:
        - name: environment_id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/ID' }
      responses:
        '200': { $ref: '#/components/responses/SuccessResponse' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }


  # TODO: FINISH --------------------------

  /v1/environments/{environment_id}/clients:
    get:
      operationId: getClientsV1
      tags: [ environments ]
      summary: Get client
      description: Get all clients in an environment
      parameters:
        - name: environment_id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/ID' }
      responses:
        '200':
          description: list of clients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientObject'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }
    post:
      operationId: createClientV1
      tags:
        - admin
      summary: Create client
      description: Create a new client
      parameters:
        - name: environment_id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/ID' }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: client name
                  pattern: ^[[:alnum:] _]+$
                  minLength: 1
                  example: Prod Server 01
              required:
                - name
      responses:
        '201': { $ref: '#/components/responses/CreateClientResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /v1/environments/{environment_id}/secrets:
    get:
      operationId: getEnvironmentSecretsV1
      tags: [ environments ]
      summary: List secrets
      description: Returns all secrets for a given project environment.
      parameters:
        - name: environment_id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/ID' }
      responses:
        '200':
          description: A list of secrets.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Secrets"
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }



  # TODO: FINISH ^^^^^^^^^^^^^^^^^^^^^^


  ###############################
  #          VARIABLES          #
  ###############################

  /v1/projects/{project_id}/variables:
    get:
      operationId: getVariablesV1
      tags: [ variables ]
      summary: Get variables
      description: Get all variables in a project
      parameters:
        - name: project_id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/ID' }
      responses:
        '200':
          description: A list of variables.
          content: { application/json: { schema: { $ref: "#/components/schemas/Variables" } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }
    post:
      operationId: createVariableV1
      tags: [ variables ]
      summary: Create variable
      description: Create a new variable in a project
      parameters:
        - name: project_id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/ID' }
      requestBody:
        $ref: '#/components/requestBodies/CreateVariableRequestBody'
      responses:
        '201': { $ref: '#/components/responses/IDResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /v1/variables/{variable_id}:
    get:
      operationId: getVariableV1
      tags: [ variables ]
      summary: Get Variable
      description: Get a variable by its ID
      parameters:
        - name: variable_id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/ID' }
      responses:
        '200':
          description: the Variable object matching `id`
          content: { application/json: { schema: { $ref: "#/components/schemas/VariableObject" } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }
    delete:
      operationId: deleteVariableV1
      tags: [ variables ]
      summary: Delete Variable
      description: Delete a variable by its ID
      parameters:
        - name: variable_id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/ID' }
      responses:
        '200': { $ref: '#/components/responses/SuccessResponse' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }

components:

  requestBodies:
    CreateVariableRequestBody:
      required: true
      description: Create Variable Request Body
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  key:
                    type: string
                    description: the key in the environment
                    pattern: ^[A-Z_][A-Z0-9_]*$
                    minLength: 1
                  generator:
                    $ref: '#/components/schemas/SecretGenerator'
                required:
                  - key
                  - generator
  responses:

    IDResponse:
      description: Unique ID of an Object
      content:
        application/json:
          schema:
            type: object
            properties:
              id: { $ref: '#/components/schemas/ID' }
            required: [ id ]

    SuccessResponse:
      description: Generic object confirming success of a request
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
                default: success
                description: success will always be returned (object is static)
            required: [ status ]

    ClientRepresentationResponse:
      description: client object
      content: { application/json: { schema: { $ref: '#/components/schemas/ClientObject' } } }

    CreateClientResponse:
      description: Created Client
      content:
        application/json:
          schema:
            type: object
            required:
              - id
              - secret
            properties:
              id:
                type: string
                format: uuid
              secret:
                type: object
                required:
                  - id
                  - key
                properties:
                  id:
                    type: string
                    format: uuid
                  key:
                    type: string

    Status:
      description: Server Status
      content:
        application/json:
          schema:
            type: object
            required: [ server, services ]
            properties:
              services:
                type: object
                description: whether required services powering the server are online
                required: [ postgres, postgrest ]
                properties:
                  postgres:
                    type: boolean
                    description: whether postgres is ready
                    default: false
                  postgrest:
                    type: boolean
                    description: whether postgres is ready
                    default: false
              server:
                type: object
                description: server status
                required: [ is_ready, version ]
                properties:
                  version:
                    type: string
                    description: version of ProjConf
                    example: 1.2.3
                  is_ready:
                    type: boolean
                    default: false
                    description: whether the server is ready to accept connections

    Ready:
      description: Ready
      content:
        application/json:
          schema:
            type: object
            properties:
              msg:
                type: string
                description: ready
                default: ready
            required:
              - msg
    BadRequest:
      description: Bad RequestError
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
    ServiceUnavailable:
      description: Service Unavailable
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }

  schemas:
    ClientObject:
      type: object
      properties:
        id: { $ref: '#/components/schemas/ID' }
        created_at:
          type: string
        display:
          type: string
        environment_id:
          type: string
          format: uuid
      required:
        - id
        - created_at
        - display
        - environment_id
    Projects:
      type: array
      items: { $ref: "#/components/schemas/ProjectObject" }
    ProjectObject:
      type: object
      required: [ id, display ]
      properties:
        id: { $ref: '#/components/schemas/ID' }
        display:
          type: string
          pattern: ^[[:alnum:] _]+$
          minLength: 1
    Variables:
      type: array
      items:
        $ref: "#/components/schemas/VariableObject"
    VariableObject:
      type: object
      properties:
        description: { type: string }
        generator_data:
          description: arbitrary generator data payload, based on type
          oneOf:
            - type: object
            - type: string
            - type: number
            - type: boolean
            - type: array
              items: { }
        generator_type: { $ref: '#/components/schemas/GeneratorType' }
        id: { $ref: '#/components/schemas/ID' }
        key: { type: string }
        project_id:
          type: string
          format: uuid
      required:
        - description
        - generator_data
        - generator_type
        - id
        - key
        - project_id
    Environments:
      type: array
      items:
        $ref: "#/components/schemas/EnvironmentObject"
    EnvironmentObject:
      type: object
      properties:
        id: { $ref: '#/components/schemas/ID' }
        display:
          type: string
      required:
        - id
        - display
    Secrets:
      type: array
      items:
        $ref: "#/components/schemas/SecretObject"
    SecretObject:
      type: object
      description: Binding of a Secret to a Variable and an Environment (with nested Project), modeled in a single schema.
      required: [ id, value, variable, environment ]
      properties:
        id: { $ref: '#/components/schemas/ID' }
        value:
          type: string
        variable:
          type: object
          required: [ id, key ]
          properties:
            id: { $ref: '#/components/schemas/ID' }
            key:
              type: string
              description: Variable key/name (e.g., "HOST")
        environment:
          type: object
          required: [ id, display, project ]
          properties:
            id: { $ref: '#/components/schemas/ID' }
            display:
              type: string
            project:
              type: object
              required: [ id, display ]
              properties:
                id:
                  type: string
                  format: uuid
                display:
                  type: string
      example:
        id: da29223b-8ef3-4b40-92a7-56a924c7e720
        value: 127.0.0.1
        variable:
          id: bc928af2-58ae-4384-8e84-7d2d91e852b7
          key: HOST
        environment:
          id: 6b74da6e-3690-401d-83a5-a8fe3c10fe94
          display: Prod
          project:
            id: 94ab1156-5b42-499f-b8aa-92ca45dfa180
            display: MVP
    ID:
      type: string
      format: uuid
      example: 157570ef-091b-4dc4-9305-5c62ed14a391
    Error:
      type: object
      properties:
        error:
          type: string
        description:
          type: string
      required:
        - error
        - description
    ##############################
    #     SECRETS GENERATORS     #
    ##############################
    GeneratorType:
      type: string
      enum:
        - STATIC
        - RANDOM
    StaticGeneratorData:
      type: string
    RandomGeneratorData:
      type: object
      properties:
        length:
          type: number
          minimum: 1
        letters:
          type: boolean
        numbers:
          type: boolean
        symbols:
          type: boolean
      required:
        - length
        - letters
        - numbers
        - symbols
    # Base (optional, for reuse)
    SecretGeneratorBase:
      type: object
      required: [ type, data ]
      properties:
        type:
          $ref: '#/components/schemas/GeneratorType'
        data: { }  # overridden in subtypes
    # Concrete variants
    SecretGeneratorStatic:
      allOf:
        - $ref: '#/components/schemas/SecretGeneratorBase'
        - type: object
          properties:
            type:
              type: string
              enum: [ STATIC ]
            data:
              $ref: '#/components/schemas/StaticGeneratorData'
    SecretGeneratorRandom:
      allOf:
        - $ref: '#/components/schemas/SecretGeneratorBase'
        - type: object
          properties:
            type:
              type: string
              enum: [ RANDOM ]
            data:
              $ref: '#/components/schemas/RandomGeneratorData'
    # Polymorphic entry point
    SecretGenerator:
      oneOf:
        - $ref: '#/components/schemas/SecretGeneratorStatic'
        - $ref: '#/components/schemas/SecretGeneratorRandom'
      discriminator:
        propertyName: type
        mapping:
          STATIC: '#/components/schemas/SecretGeneratorStatic'
          RANDOM: '#/components/schemas/SecretGeneratorRandom'