// Package postgrest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package postgrest

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for VariablesGeneratorType.
const (
	RANDOM VariablesGeneratorType = "RANDOM"
	STATIC VariablesGeneratorType = "STATIC"
)

// Defines values for DeleteClientsParamsPrefer.
const (
	DeleteClientsParamsPreferReturnMinimal        DeleteClientsParamsPrefer = "return=minimal"
	DeleteClientsParamsPreferReturnNone           DeleteClientsParamsPrefer = "return=none"
	DeleteClientsParamsPreferReturnRepresentation DeleteClientsParamsPrefer = "return=representation"
)

// Defines values for GetClientsParamsPrefer.
const (
	GetClientsParamsPreferCountNone GetClientsParamsPrefer = "count=none"
)

// Defines values for PatchClientsParamsPrefer.
const (
	PatchClientsParamsPreferReturnMinimal        PatchClientsParamsPrefer = "return=minimal"
	PatchClientsParamsPreferReturnNone           PatchClientsParamsPrefer = "return=none"
	PatchClientsParamsPreferReturnRepresentation PatchClientsParamsPrefer = "return=representation"
)

// Defines values for PostClientsParamsPrefer.
const (
	PostClientsParamsPreferResolutionIgnoreDuplicates PostClientsParamsPrefer = "resolution=ignore-duplicates"
	PostClientsParamsPreferResolutionMergeDuplicates  PostClientsParamsPrefer = "resolution=merge-duplicates"
	PostClientsParamsPreferReturnMinimal              PostClientsParamsPrefer = "return=minimal"
	PostClientsParamsPreferReturnNone                 PostClientsParamsPrefer = "return=none"
	PostClientsParamsPreferReturnRepresentation       PostClientsParamsPrefer = "return=representation"
)

// Defines values for DeleteClientsSecretsParamsPrefer.
const (
	DeleteClientsSecretsParamsPreferReturnMinimal        DeleteClientsSecretsParamsPrefer = "return=minimal"
	DeleteClientsSecretsParamsPreferReturnNone           DeleteClientsSecretsParamsPrefer = "return=none"
	DeleteClientsSecretsParamsPreferReturnRepresentation DeleteClientsSecretsParamsPrefer = "return=representation"
)

// Defines values for GetClientsSecretsParamsPrefer.
const (
	GetClientsSecretsParamsPreferCountNone GetClientsSecretsParamsPrefer = "count=none"
)

// Defines values for PatchClientsSecretsParamsPrefer.
const (
	PatchClientsSecretsParamsPreferReturnMinimal        PatchClientsSecretsParamsPrefer = "return=minimal"
	PatchClientsSecretsParamsPreferReturnNone           PatchClientsSecretsParamsPrefer = "return=none"
	PatchClientsSecretsParamsPreferReturnRepresentation PatchClientsSecretsParamsPrefer = "return=representation"
)

// Defines values for PostClientsSecretsParamsPrefer.
const (
	PostClientsSecretsParamsPreferResolutionIgnoreDuplicates PostClientsSecretsParamsPrefer = "resolution=ignore-duplicates"
	PostClientsSecretsParamsPreferResolutionMergeDuplicates  PostClientsSecretsParamsPrefer = "resolution=merge-duplicates"
	PostClientsSecretsParamsPreferReturnMinimal              PostClientsSecretsParamsPrefer = "return=minimal"
	PostClientsSecretsParamsPreferReturnNone                 PostClientsSecretsParamsPrefer = "return=none"
	PostClientsSecretsParamsPreferReturnRepresentation       PostClientsSecretsParamsPrefer = "return=representation"
)

// Defines values for DeleteEnvironmentsParamsPrefer.
const (
	DeleteEnvironmentsParamsPreferReturnMinimal        DeleteEnvironmentsParamsPrefer = "return=minimal"
	DeleteEnvironmentsParamsPreferReturnNone           DeleteEnvironmentsParamsPrefer = "return=none"
	DeleteEnvironmentsParamsPreferReturnRepresentation DeleteEnvironmentsParamsPrefer = "return=representation"
)

// Defines values for GetEnvironmentsParamsPrefer.
const (
	GetEnvironmentsParamsPreferCountNone GetEnvironmentsParamsPrefer = "count=none"
)

// Defines values for PatchEnvironmentsParamsPrefer.
const (
	PatchEnvironmentsParamsPreferReturnMinimal        PatchEnvironmentsParamsPrefer = "return=minimal"
	PatchEnvironmentsParamsPreferReturnNone           PatchEnvironmentsParamsPrefer = "return=none"
	PatchEnvironmentsParamsPreferReturnRepresentation PatchEnvironmentsParamsPrefer = "return=representation"
)

// Defines values for PostEnvironmentsParamsPrefer.
const (
	PostEnvironmentsParamsPreferResolutionIgnoreDuplicates PostEnvironmentsParamsPrefer = "resolution=ignore-duplicates"
	PostEnvironmentsParamsPreferResolutionMergeDuplicates  PostEnvironmentsParamsPrefer = "resolution=merge-duplicates"
	PostEnvironmentsParamsPreferReturnMinimal              PostEnvironmentsParamsPrefer = "return=minimal"
	PostEnvironmentsParamsPreferReturnNone                 PostEnvironmentsParamsPrefer = "return=none"
	PostEnvironmentsParamsPreferReturnRepresentation       PostEnvironmentsParamsPrefer = "return=representation"
)

// Defines values for DeleteProjectsParamsPrefer.
const (
	DeleteProjectsParamsPreferReturnMinimal        DeleteProjectsParamsPrefer = "return=minimal"
	DeleteProjectsParamsPreferReturnNone           DeleteProjectsParamsPrefer = "return=none"
	DeleteProjectsParamsPreferReturnRepresentation DeleteProjectsParamsPrefer = "return=representation"
)

// Defines values for GetProjectsParamsPrefer.
const (
	GetProjectsParamsPreferCountNone GetProjectsParamsPrefer = "count=none"
)

// Defines values for PatchProjectsParamsPrefer.
const (
	PatchProjectsParamsPreferReturnMinimal        PatchProjectsParamsPrefer = "return=minimal"
	PatchProjectsParamsPreferReturnNone           PatchProjectsParamsPrefer = "return=none"
	PatchProjectsParamsPreferReturnRepresentation PatchProjectsParamsPrefer = "return=representation"
)

// Defines values for PostProjectsParamsPrefer.
const (
	PostProjectsParamsPreferResolutionIgnoreDuplicates PostProjectsParamsPrefer = "resolution=ignore-duplicates"
	PostProjectsParamsPreferResolutionMergeDuplicates  PostProjectsParamsPrefer = "resolution=merge-duplicates"
	PostProjectsParamsPreferReturnMinimal              PostProjectsParamsPrefer = "return=minimal"
	PostProjectsParamsPreferReturnNone                 PostProjectsParamsPrefer = "return=none"
	PostProjectsParamsPreferReturnRepresentation       PostProjectsParamsPrefer = "return=representation"
)

// Defines values for PostRpcSecretsParamsPrefer.
const (
	ParamsSingleObject PostRpcSecretsParamsPrefer = "params=single-object"
)

// Defines values for DeleteSecretsParamsPrefer.
const (
	DeleteSecretsParamsPreferReturnMinimal        DeleteSecretsParamsPrefer = "return=minimal"
	DeleteSecretsParamsPreferReturnNone           DeleteSecretsParamsPrefer = "return=none"
	DeleteSecretsParamsPreferReturnRepresentation DeleteSecretsParamsPrefer = "return=representation"
)

// Defines values for GetSecretsParamsPrefer.
const (
	GetSecretsParamsPreferCountNone GetSecretsParamsPrefer = "count=none"
)

// Defines values for PatchSecretsParamsPrefer.
const (
	PatchSecretsParamsPreferReturnMinimal        PatchSecretsParamsPrefer = "return=minimal"
	PatchSecretsParamsPreferReturnNone           PatchSecretsParamsPrefer = "return=none"
	PatchSecretsParamsPreferReturnRepresentation PatchSecretsParamsPrefer = "return=representation"
)

// Defines values for PostSecretsParamsPrefer.
const (
	PostSecretsParamsPreferResolutionIgnoreDuplicates PostSecretsParamsPrefer = "resolution=ignore-duplicates"
	PostSecretsParamsPreferResolutionMergeDuplicates  PostSecretsParamsPrefer = "resolution=merge-duplicates"
	PostSecretsParamsPreferReturnMinimal              PostSecretsParamsPrefer = "return=minimal"
	PostSecretsParamsPreferReturnNone                 PostSecretsParamsPrefer = "return=none"
	PostSecretsParamsPreferReturnRepresentation       PostSecretsParamsPrefer = "return=representation"
)

// Defines values for DeleteVariablesParamsPrefer.
const (
	DeleteVariablesParamsPreferReturnMinimal        DeleteVariablesParamsPrefer = "return=minimal"
	DeleteVariablesParamsPreferReturnNone           DeleteVariablesParamsPrefer = "return=none"
	DeleteVariablesParamsPreferReturnRepresentation DeleteVariablesParamsPrefer = "return=representation"
)

// Defines values for GetVariablesParamsPrefer.
const (
	GetVariablesParamsPreferCountNone GetVariablesParamsPrefer = "count=none"
)

// Defines values for PatchVariablesParamsPrefer.
const (
	PatchVariablesParamsPreferReturnMinimal        PatchVariablesParamsPrefer = "return=minimal"
	PatchVariablesParamsPreferReturnNone           PatchVariablesParamsPrefer = "return=none"
	PatchVariablesParamsPreferReturnRepresentation PatchVariablesParamsPrefer = "return=representation"
)

// Defines values for PostVariablesParamsPrefer.
const (
	PostVariablesParamsPreferResolutionIgnoreDuplicates PostVariablesParamsPrefer = "resolution=ignore-duplicates"
	PostVariablesParamsPreferResolutionMergeDuplicates  PostVariablesParamsPrefer = "resolution=merge-duplicates"
	PostVariablesParamsPreferReturnMinimal              PostVariablesParamsPrefer = "return=minimal"
	PostVariablesParamsPreferReturnNone                 PostVariablesParamsPrefer = "return=none"
	PostVariablesParamsPreferReturnRepresentation       PostVariablesParamsPrefer = "return=representation"
)

// Clients defines model for clients.
type Clients struct {
	CreatedAt string `json:"created_at"`
	Display   string `json:"display"`

	// EnvironmentId Note:
	// This is a Foreign Key to `environments.id`.<fk table='environments' column='id'/>
	EnvironmentId openapi_types.UUID `json:"environment_id"`

	// Id Note:
	// This is a Primary Key.<pk/>
	Id openapi_types.UUID `json:"id"`
}

// ClientsSecrets defines model for clients_secrets.
type ClientsSecrets struct {
	// ClientId Note:
	// This is a Foreign Key to `clients.id`.<fk table='clients' column='id'/>
	ClientId  openapi_types.UUID `json:"client_id"`
	CreatedAt string             `json:"created_at"`
	Hash      string             `json:"hash"`

	// Id Note:
	// This is a Primary Key.<pk/>
	Id openapi_types.UUID `json:"id"`
}

// Environments defines model for environments.
type Environments struct {
	CreatedAt string `json:"created_at"`
	Display   string `json:"display"`

	// Id Note:
	// This is a Primary Key.<pk/>
	Id openapi_types.UUID `json:"id"`

	// ProjectId Note:
	// This is a Foreign Key to `projects.id`.<fk table='projects' column='id'/>
	ProjectId openapi_types.UUID `json:"project_id"`
}

// Projects defines model for projects.
type Projects struct {
	Display string `json:"display"`

	// Id Note:
	// This is a Primary Key.<pk/>
	Id openapi_types.UUID `json:"id"`
}

// Secrets defines model for secrets.
type Secrets struct {
	CreatedAt string `json:"created_at"`

	// EnvironmentId Note:
	// This is a Foreign Key to `environments.id`.<fk table='environments' column='id'/>
	EnvironmentId openapi_types.UUID `json:"environment_id"`

	// Id Note:
	// This is a Primary Key.<pk/>
	Id openapi_types.UUID `json:"id"`

	// VariableId Note:
	// This is a Foreign Key to `variables.id`.<fk table='variables' column='id'/>
	VariableId openapi_types.UUID `json:"variable_id"`
}

// Variables defines model for variables.
type Variables struct {
	Description   string                 `json:"description"`
	GeneratorData map[string]interface{} `json:"generator_data"`
	GeneratorType VariablesGeneratorType `json:"generator_type"`

	// Id Note:
	// This is a Primary Key.<pk/>
	Id  openapi_types.UUID `json:"id"`
	Key string             `json:"key"`

	// ProjectId Note:
	// This is a Foreign Key to `projects.id`.<fk table='projects' column='id'/>
	ProjectId openapi_types.UUID `json:"project_id"`
}

// VariablesGeneratorType defines model for Variables.GeneratorType.
type VariablesGeneratorType string

// DeleteClientsParams defines parameters for DeleteClients.
type DeleteClientsParams struct {
	Id            *string `form:"id,omitempty" json:"id,omitempty"`
	CreatedAt     *string `form:"created_at,omitempty" json:"created_at,omitempty"`
	Display       *string `form:"display,omitempty" json:"display,omitempty"`
	EnvironmentId *string `form:"environment_id,omitempty" json:"environment_id,omitempty"`

	// Prefer Preference
	Prefer *DeleteClientsParamsPrefer `json:"Prefer,omitempty"`
}

// DeleteClientsParamsPrefer defines parameters for DeleteClients.
type DeleteClientsParamsPrefer string

// GetClientsParams defines parameters for GetClients.
type GetClientsParams struct {
	Id            *string `form:"id,omitempty" json:"id,omitempty"`
	CreatedAt     *string `form:"created_at,omitempty" json:"created_at,omitempty"`
	Display       *string `form:"display,omitempty" json:"display,omitempty"`
	EnvironmentId *string `form:"environment_id,omitempty" json:"environment_id,omitempty"`

	// Select Filtering Columns
	Select *string `form:"select,omitempty" json:"select,omitempty"`

	// Order Ordering
	Order *string `form:"order,omitempty" json:"order,omitempty"`

	// Offset Limiting and Pagination
	Offset *string `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limiting and Pagination
	Limit *string `form:"limit,omitempty" json:"limit,omitempty"`

	// Range Limiting and Pagination
	Range *string `json:"Range,omitempty"`

	// RangeUnit Limiting and Pagination
	RangeUnit *string `json:"Range-Unit,omitempty"`

	// Prefer Preference
	Prefer *GetClientsParamsPrefer `json:"Prefer,omitempty"`
}

// GetClientsParamsPrefer defines parameters for GetClients.
type GetClientsParamsPrefer string

// PatchClientsParams defines parameters for PatchClients.
type PatchClientsParams struct {
	Id            *string `form:"id,omitempty" json:"id,omitempty"`
	CreatedAt     *string `form:"created_at,omitempty" json:"created_at,omitempty"`
	Display       *string `form:"display,omitempty" json:"display,omitempty"`
	EnvironmentId *string `form:"environment_id,omitempty" json:"environment_id,omitempty"`

	// Prefer Preference
	Prefer *PatchClientsParamsPrefer `json:"Prefer,omitempty"`
}

// PatchClientsParamsPrefer defines parameters for PatchClients.
type PatchClientsParamsPrefer string

// PostClientsParams defines parameters for PostClients.
type PostClientsParams struct {
	// Select Filtering Columns
	Select *string `form:"select,omitempty" json:"select,omitempty"`

	// Prefer Preference
	Prefer *PostClientsParamsPrefer `json:"Prefer,omitempty"`
}

// PostClientsParamsPrefer defines parameters for PostClients.
type PostClientsParamsPrefer string

// DeleteClientsSecretsParams defines parameters for DeleteClientsSecrets.
type DeleteClientsSecretsParams struct {
	Id        *string `form:"id,omitempty" json:"id,omitempty"`
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty"`
	Hash      *string `form:"hash,omitempty" json:"hash,omitempty"`
	ClientId  *string `form:"client_id,omitempty" json:"client_id,omitempty"`

	// Prefer Preference
	Prefer *DeleteClientsSecretsParamsPrefer `json:"Prefer,omitempty"`
}

// DeleteClientsSecretsParamsPrefer defines parameters for DeleteClientsSecrets.
type DeleteClientsSecretsParamsPrefer string

// GetClientsSecretsParams defines parameters for GetClientsSecrets.
type GetClientsSecretsParams struct {
	Id        *string `form:"id,omitempty" json:"id,omitempty"`
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty"`
	Hash      *string `form:"hash,omitempty" json:"hash,omitempty"`
	ClientId  *string `form:"client_id,omitempty" json:"client_id,omitempty"`

	// Select Filtering Columns
	Select *string `form:"select,omitempty" json:"select,omitempty"`

	// Order Ordering
	Order *string `form:"order,omitempty" json:"order,omitempty"`

	// Offset Limiting and Pagination
	Offset *string `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limiting and Pagination
	Limit *string `form:"limit,omitempty" json:"limit,omitempty"`

	// Range Limiting and Pagination
	Range *string `json:"Range,omitempty"`

	// RangeUnit Limiting and Pagination
	RangeUnit *string `json:"Range-Unit,omitempty"`

	// Prefer Preference
	Prefer *GetClientsSecretsParamsPrefer `json:"Prefer,omitempty"`
}

// GetClientsSecretsParamsPrefer defines parameters for GetClientsSecrets.
type GetClientsSecretsParamsPrefer string

// PatchClientsSecretsParams defines parameters for PatchClientsSecrets.
type PatchClientsSecretsParams struct {
	Id        *string `form:"id,omitempty" json:"id,omitempty"`
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty"`
	Hash      *string `form:"hash,omitempty" json:"hash,omitempty"`
	ClientId  *string `form:"client_id,omitempty" json:"client_id,omitempty"`

	// Prefer Preference
	Prefer *PatchClientsSecretsParamsPrefer `json:"Prefer,omitempty"`
}

// PatchClientsSecretsParamsPrefer defines parameters for PatchClientsSecrets.
type PatchClientsSecretsParamsPrefer string

// PostClientsSecretsParams defines parameters for PostClientsSecrets.
type PostClientsSecretsParams struct {
	// Select Filtering Columns
	Select *string `form:"select,omitempty" json:"select,omitempty"`

	// Prefer Preference
	Prefer *PostClientsSecretsParamsPrefer `json:"Prefer,omitempty"`
}

// PostClientsSecretsParamsPrefer defines parameters for PostClientsSecrets.
type PostClientsSecretsParamsPrefer string

// DeleteEnvironmentsParams defines parameters for DeleteEnvironments.
type DeleteEnvironmentsParams struct {
	Id        *string `form:"id,omitempty" json:"id,omitempty"`
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty"`
	Display   *string `form:"display,omitempty" json:"display,omitempty"`
	ProjectId *string `form:"project_id,omitempty" json:"project_id,omitempty"`

	// Prefer Preference
	Prefer *DeleteEnvironmentsParamsPrefer `json:"Prefer,omitempty"`
}

// DeleteEnvironmentsParamsPrefer defines parameters for DeleteEnvironments.
type DeleteEnvironmentsParamsPrefer string

// GetEnvironmentsParams defines parameters for GetEnvironments.
type GetEnvironmentsParams struct {
	Id        *string `form:"id,omitempty" json:"id,omitempty"`
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty"`
	Display   *string `form:"display,omitempty" json:"display,omitempty"`
	ProjectId *string `form:"project_id,omitempty" json:"project_id,omitempty"`

	// Select Filtering Columns
	Select *string `form:"select,omitempty" json:"select,omitempty"`

	// Order Ordering
	Order *string `form:"order,omitempty" json:"order,omitempty"`

	// Offset Limiting and Pagination
	Offset *string `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limiting and Pagination
	Limit *string `form:"limit,omitempty" json:"limit,omitempty"`

	// Range Limiting and Pagination
	Range *string `json:"Range,omitempty"`

	// RangeUnit Limiting and Pagination
	RangeUnit *string `json:"Range-Unit,omitempty"`

	// Prefer Preference
	Prefer *GetEnvironmentsParamsPrefer `json:"Prefer,omitempty"`
}

// GetEnvironmentsParamsPrefer defines parameters for GetEnvironments.
type GetEnvironmentsParamsPrefer string

// PatchEnvironmentsParams defines parameters for PatchEnvironments.
type PatchEnvironmentsParams struct {
	Id        *string `form:"id,omitempty" json:"id,omitempty"`
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty"`
	Display   *string `form:"display,omitempty" json:"display,omitempty"`
	ProjectId *string `form:"project_id,omitempty" json:"project_id,omitempty"`

	// Prefer Preference
	Prefer *PatchEnvironmentsParamsPrefer `json:"Prefer,omitempty"`
}

// PatchEnvironmentsParamsPrefer defines parameters for PatchEnvironments.
type PatchEnvironmentsParamsPrefer string

// PostEnvironmentsParams defines parameters for PostEnvironments.
type PostEnvironmentsParams struct {
	// Select Filtering Columns
	Select *string `form:"select,omitempty" json:"select,omitempty"`

	// Prefer Preference
	Prefer *PostEnvironmentsParamsPrefer `json:"Prefer,omitempty"`
}

// PostEnvironmentsParamsPrefer defines parameters for PostEnvironments.
type PostEnvironmentsParamsPrefer string

// DeleteProjectsParams defines parameters for DeleteProjects.
type DeleteProjectsParams struct {
	Id      *string `form:"id,omitempty" json:"id,omitempty"`
	Display *string `form:"display,omitempty" json:"display,omitempty"`

	// Prefer Preference
	Prefer *DeleteProjectsParamsPrefer `json:"Prefer,omitempty"`
}

// DeleteProjectsParamsPrefer defines parameters for DeleteProjects.
type DeleteProjectsParamsPrefer string

// GetProjectsParams defines parameters for GetProjects.
type GetProjectsParams struct {
	Id      *string `form:"id,omitempty" json:"id,omitempty"`
	Display *string `form:"display,omitempty" json:"display,omitempty"`

	// Select Filtering Columns
	Select *string `form:"select,omitempty" json:"select,omitempty"`

	// Order Ordering
	Order *string `form:"order,omitempty" json:"order,omitempty"`

	// Offset Limiting and Pagination
	Offset *string `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limiting and Pagination
	Limit *string `form:"limit,omitempty" json:"limit,omitempty"`

	// Range Limiting and Pagination
	Range *string `json:"Range,omitempty"`

	// RangeUnit Limiting and Pagination
	RangeUnit *string `json:"Range-Unit,omitempty"`

	// Prefer Preference
	Prefer *GetProjectsParamsPrefer `json:"Prefer,omitempty"`
}

// GetProjectsParamsPrefer defines parameters for GetProjects.
type GetProjectsParamsPrefer string

// PatchProjectsParams defines parameters for PatchProjects.
type PatchProjectsParams struct {
	Id      *string `form:"id,omitempty" json:"id,omitempty"`
	Display *string `form:"display,omitempty" json:"display,omitempty"`

	// Prefer Preference
	Prefer *PatchProjectsParamsPrefer `json:"Prefer,omitempty"`
}

// PatchProjectsParamsPrefer defines parameters for PatchProjects.
type PatchProjectsParamsPrefer string

// PostProjectsParams defines parameters for PostProjects.
type PostProjectsParams struct {
	// Select Filtering Columns
	Select *string `form:"select,omitempty" json:"select,omitempty"`

	// Prefer Preference
	Prefer *PostProjectsParamsPrefer `json:"Prefer,omitempty"`
}

// PostProjectsParamsPrefer defines parameters for PostProjects.
type PostProjectsParamsPrefer string

// PostRpcSecretsJSONBody defines parameters for PostRpcSecrets.
type PostRpcSecretsJSONBody = map[string]interface{}

// PostRpcSecretsApplicationVndPgrstObjectPlusJSONBody defines parameters for PostRpcSecrets.
type PostRpcSecretsApplicationVndPgrstObjectPlusJSONBody = map[string]interface{}

// PostRpcSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedBody defines parameters for PostRpcSecrets.
type PostRpcSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedBody = map[string]interface{}

// PostRpcSecretsParams defines parameters for PostRpcSecrets.
type PostRpcSecretsParams struct {
	// Prefer Preference
	Prefer *PostRpcSecretsParamsPrefer `json:"Prefer,omitempty"`
}

// PostRpcSecretsParamsPrefer defines parameters for PostRpcSecrets.
type PostRpcSecretsParamsPrefer string

// DeleteSecretsParams defines parameters for DeleteSecrets.
type DeleteSecretsParams struct {
	Id            *string `form:"id,omitempty" json:"id,omitempty"`
	CreatedAt     *string `form:"created_at,omitempty" json:"created_at,omitempty"`
	VariableId    *string `form:"variable_id,omitempty" json:"variable_id,omitempty"`
	EnvironmentId *string `form:"environment_id,omitempty" json:"environment_id,omitempty"`

	// Prefer Preference
	Prefer *DeleteSecretsParamsPrefer `json:"Prefer,omitempty"`
}

// DeleteSecretsParamsPrefer defines parameters for DeleteSecrets.
type DeleteSecretsParamsPrefer string

// GetSecretsParams defines parameters for GetSecrets.
type GetSecretsParams struct {
	Id            *string `form:"id,omitempty" json:"id,omitempty"`
	CreatedAt     *string `form:"created_at,omitempty" json:"created_at,omitempty"`
	VariableId    *string `form:"variable_id,omitempty" json:"variable_id,omitempty"`
	EnvironmentId *string `form:"environment_id,omitempty" json:"environment_id,omitempty"`

	// Select Filtering Columns
	Select *string `form:"select,omitempty" json:"select,omitempty"`

	// Order Ordering
	Order *string `form:"order,omitempty" json:"order,omitempty"`

	// Offset Limiting and Pagination
	Offset *string `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limiting and Pagination
	Limit *string `form:"limit,omitempty" json:"limit,omitempty"`

	// Range Limiting and Pagination
	Range *string `json:"Range,omitempty"`

	// RangeUnit Limiting and Pagination
	RangeUnit *string `json:"Range-Unit,omitempty"`

	// Prefer Preference
	Prefer *GetSecretsParamsPrefer `json:"Prefer,omitempty"`
}

// GetSecretsParamsPrefer defines parameters for GetSecrets.
type GetSecretsParamsPrefer string

// PatchSecretsParams defines parameters for PatchSecrets.
type PatchSecretsParams struct {
	Id            *string `form:"id,omitempty" json:"id,omitempty"`
	CreatedAt     *string `form:"created_at,omitempty" json:"created_at,omitempty"`
	VariableId    *string `form:"variable_id,omitempty" json:"variable_id,omitempty"`
	EnvironmentId *string `form:"environment_id,omitempty" json:"environment_id,omitempty"`

	// Prefer Preference
	Prefer *PatchSecretsParamsPrefer `json:"Prefer,omitempty"`
}

// PatchSecretsParamsPrefer defines parameters for PatchSecrets.
type PatchSecretsParamsPrefer string

// PostSecretsParams defines parameters for PostSecrets.
type PostSecretsParams struct {
	// Select Filtering Columns
	Select *string `form:"select,omitempty" json:"select,omitempty"`

	// Prefer Preference
	Prefer *PostSecretsParamsPrefer `json:"Prefer,omitempty"`
}

// PostSecretsParamsPrefer defines parameters for PostSecrets.
type PostSecretsParamsPrefer string

// DeleteVariablesParams defines parameters for DeleteVariables.
type DeleteVariablesParams struct {
	Id            *string `form:"id,omitempty" json:"id,omitempty"`
	Description   *string `form:"description,omitempty" json:"description,omitempty"`
	Key           *string `form:"key,omitempty" json:"key,omitempty"`
	GeneratorData *string `form:"generator_data,omitempty" json:"generator_data,omitempty"`
	GeneratorType *string `form:"generator_type,omitempty" json:"generator_type,omitempty"`
	ProjectId     *string `form:"project_id,omitempty" json:"project_id,omitempty"`

	// Prefer Preference
	Prefer *DeleteVariablesParamsPrefer `json:"Prefer,omitempty"`
}

// DeleteVariablesParamsPrefer defines parameters for DeleteVariables.
type DeleteVariablesParamsPrefer string

// GetVariablesParams defines parameters for GetVariables.
type GetVariablesParams struct {
	Id            *string `form:"id,omitempty" json:"id,omitempty"`
	Description   *string `form:"description,omitempty" json:"description,omitempty"`
	Key           *string `form:"key,omitempty" json:"key,omitempty"`
	GeneratorData *string `form:"generator_data,omitempty" json:"generator_data,omitempty"`
	GeneratorType *string `form:"generator_type,omitempty" json:"generator_type,omitempty"`
	ProjectId     *string `form:"project_id,omitempty" json:"project_id,omitempty"`

	// Select Filtering Columns
	Select *string `form:"select,omitempty" json:"select,omitempty"`

	// Order Ordering
	Order *string `form:"order,omitempty" json:"order,omitempty"`

	// Offset Limiting and Pagination
	Offset *string `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limiting and Pagination
	Limit *string `form:"limit,omitempty" json:"limit,omitempty"`

	// Range Limiting and Pagination
	Range *string `json:"Range,omitempty"`

	// RangeUnit Limiting and Pagination
	RangeUnit *string `json:"Range-Unit,omitempty"`

	// Prefer Preference
	Prefer *GetVariablesParamsPrefer `json:"Prefer,omitempty"`
}

// GetVariablesParamsPrefer defines parameters for GetVariables.
type GetVariablesParamsPrefer string

// PatchVariablesParams defines parameters for PatchVariables.
type PatchVariablesParams struct {
	Id            *string `form:"id,omitempty" json:"id,omitempty"`
	Description   *string `form:"description,omitempty" json:"description,omitempty"`
	Key           *string `form:"key,omitempty" json:"key,omitempty"`
	GeneratorData *string `form:"generator_data,omitempty" json:"generator_data,omitempty"`
	GeneratorType *string `form:"generator_type,omitempty" json:"generator_type,omitempty"`
	ProjectId     *string `form:"project_id,omitempty" json:"project_id,omitempty"`

	// Prefer Preference
	Prefer *PatchVariablesParamsPrefer `json:"Prefer,omitempty"`
}

// PatchVariablesParamsPrefer defines parameters for PatchVariables.
type PatchVariablesParamsPrefer string

// PostVariablesParams defines parameters for PostVariables.
type PostVariablesParams struct {
	// Select Filtering Columns
	Select *string `form:"select,omitempty" json:"select,omitempty"`

	// Prefer Preference
	Prefer *PostVariablesParamsPrefer `json:"Prefer,omitempty"`
}

// PostVariablesParamsPrefer defines parameters for PostVariables.
type PostVariablesParamsPrefer string

// PatchClientsJSONRequestBody defines body for PatchClients for application/json ContentType.
type PatchClientsJSONRequestBody = Clients

// PatchClientsApplicationVndPgrstObjectPlusJSONRequestBody defines body for PatchClients for application/vnd.pgrst.object+json ContentType.
type PatchClientsApplicationVndPgrstObjectPlusJSONRequestBody = Clients

// PatchClientsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody defines body for PatchClients for application/vnd.pgrst.object+json;nulls=stripped ContentType.
type PatchClientsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody = Clients

// PostClientsJSONRequestBody defines body for PostClients for application/json ContentType.
type PostClientsJSONRequestBody = Clients

// PostClientsApplicationVndPgrstObjectPlusJSONRequestBody defines body for PostClients for application/vnd.pgrst.object+json ContentType.
type PostClientsApplicationVndPgrstObjectPlusJSONRequestBody = Clients

// PostClientsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody defines body for PostClients for application/vnd.pgrst.object+json;nulls=stripped ContentType.
type PostClientsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody = Clients

// PatchClientsSecretsJSONRequestBody defines body for PatchClientsSecrets for application/json ContentType.
type PatchClientsSecretsJSONRequestBody = ClientsSecrets

// PatchClientsSecretsApplicationVndPgrstObjectPlusJSONRequestBody defines body for PatchClientsSecrets for application/vnd.pgrst.object+json ContentType.
type PatchClientsSecretsApplicationVndPgrstObjectPlusJSONRequestBody = ClientsSecrets

// PatchClientsSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody defines body for PatchClientsSecrets for application/vnd.pgrst.object+json;nulls=stripped ContentType.
type PatchClientsSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody = ClientsSecrets

// PostClientsSecretsJSONRequestBody defines body for PostClientsSecrets for application/json ContentType.
type PostClientsSecretsJSONRequestBody = ClientsSecrets

// PostClientsSecretsApplicationVndPgrstObjectPlusJSONRequestBody defines body for PostClientsSecrets for application/vnd.pgrst.object+json ContentType.
type PostClientsSecretsApplicationVndPgrstObjectPlusJSONRequestBody = ClientsSecrets

// PostClientsSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody defines body for PostClientsSecrets for application/vnd.pgrst.object+json;nulls=stripped ContentType.
type PostClientsSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody = ClientsSecrets

// PatchEnvironmentsJSONRequestBody defines body for PatchEnvironments for application/json ContentType.
type PatchEnvironmentsJSONRequestBody = Environments

// PatchEnvironmentsApplicationVndPgrstObjectPlusJSONRequestBody defines body for PatchEnvironments for application/vnd.pgrst.object+json ContentType.
type PatchEnvironmentsApplicationVndPgrstObjectPlusJSONRequestBody = Environments

// PatchEnvironmentsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody defines body for PatchEnvironments for application/vnd.pgrst.object+json;nulls=stripped ContentType.
type PatchEnvironmentsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody = Environments

// PostEnvironmentsJSONRequestBody defines body for PostEnvironments for application/json ContentType.
type PostEnvironmentsJSONRequestBody = Environments

// PostEnvironmentsApplicationVndPgrstObjectPlusJSONRequestBody defines body for PostEnvironments for application/vnd.pgrst.object+json ContentType.
type PostEnvironmentsApplicationVndPgrstObjectPlusJSONRequestBody = Environments

// PostEnvironmentsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody defines body for PostEnvironments for application/vnd.pgrst.object+json;nulls=stripped ContentType.
type PostEnvironmentsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody = Environments

// PatchProjectsJSONRequestBody defines body for PatchProjects for application/json ContentType.
type PatchProjectsJSONRequestBody = Projects

// PatchProjectsApplicationVndPgrstObjectPlusJSONRequestBody defines body for PatchProjects for application/vnd.pgrst.object+json ContentType.
type PatchProjectsApplicationVndPgrstObjectPlusJSONRequestBody = Projects

// PatchProjectsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody defines body for PatchProjects for application/vnd.pgrst.object+json;nulls=stripped ContentType.
type PatchProjectsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody = Projects

// PostProjectsJSONRequestBody defines body for PostProjects for application/json ContentType.
type PostProjectsJSONRequestBody = Projects

// PostProjectsApplicationVndPgrstObjectPlusJSONRequestBody defines body for PostProjects for application/vnd.pgrst.object+json ContentType.
type PostProjectsApplicationVndPgrstObjectPlusJSONRequestBody = Projects

// PostProjectsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody defines body for PostProjects for application/vnd.pgrst.object+json;nulls=stripped ContentType.
type PostProjectsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody = Projects

// PostRpcSecretsJSONRequestBody defines body for PostRpcSecrets for application/json ContentType.
type PostRpcSecretsJSONRequestBody = PostRpcSecretsJSONBody

// PostRpcSecretsApplicationVndPgrstObjectPlusJSONRequestBody defines body for PostRpcSecrets for application/vnd.pgrst.object+json ContentType.
type PostRpcSecretsApplicationVndPgrstObjectPlusJSONRequestBody = PostRpcSecretsApplicationVndPgrstObjectPlusJSONBody

// PostRpcSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody defines body for PostRpcSecrets for application/vnd.pgrst.object+json;nulls=stripped ContentType.
type PostRpcSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody = PostRpcSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedBody

// PatchSecretsJSONRequestBody defines body for PatchSecrets for application/json ContentType.
type PatchSecretsJSONRequestBody = Secrets

// PatchSecretsApplicationVndPgrstObjectPlusJSONRequestBody defines body for PatchSecrets for application/vnd.pgrst.object+json ContentType.
type PatchSecretsApplicationVndPgrstObjectPlusJSONRequestBody = Secrets

// PatchSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody defines body for PatchSecrets for application/vnd.pgrst.object+json;nulls=stripped ContentType.
type PatchSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody = Secrets

// PostSecretsJSONRequestBody defines body for PostSecrets for application/json ContentType.
type PostSecretsJSONRequestBody = Secrets

// PostSecretsApplicationVndPgrstObjectPlusJSONRequestBody defines body for PostSecrets for application/vnd.pgrst.object+json ContentType.
type PostSecretsApplicationVndPgrstObjectPlusJSONRequestBody = Secrets

// PostSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody defines body for PostSecrets for application/vnd.pgrst.object+json;nulls=stripped ContentType.
type PostSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody = Secrets

// PatchVariablesJSONRequestBody defines body for PatchVariables for application/json ContentType.
type PatchVariablesJSONRequestBody = Variables

// PatchVariablesApplicationVndPgrstObjectPlusJSONRequestBody defines body for PatchVariables for application/vnd.pgrst.object+json ContentType.
type PatchVariablesApplicationVndPgrstObjectPlusJSONRequestBody = Variables

// PatchVariablesApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody defines body for PatchVariables for application/vnd.pgrst.object+json;nulls=stripped ContentType.
type PatchVariablesApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody = Variables

// PostVariablesJSONRequestBody defines body for PostVariables for application/json ContentType.
type PostVariablesJSONRequestBody = Variables

// PostVariablesApplicationVndPgrstObjectPlusJSONRequestBody defines body for PostVariables for application/vnd.pgrst.object+json ContentType.
type PostVariablesApplicationVndPgrstObjectPlusJSONRequestBody = Variables

// PostVariablesApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody defines body for PostVariables for application/vnd.pgrst.object+json;nulls=stripped ContentType.
type PostVariablesApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody = Variables

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Get request
	Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClients request
	DeleteClients(ctx context.Context, params *DeleteClientsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClients request
	GetClients(ctx context.Context, params *GetClientsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchClientsWithBody request with any body
	PatchClientsWithBody(ctx context.Context, params *PatchClientsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchClients(ctx context.Context, params *PatchClientsParams, body PatchClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchClientsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchClientsParams, body PatchClientsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchClientsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchClientsParams, body PatchClientsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientsWithBody request with any body
	PostClientsWithBody(ctx context.Context, params *PostClientsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClients(ctx context.Context, params *PostClientsParams, body PostClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostClientsParams, body PostClientsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostClientsParams, body PostClientsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClientsSecrets request
	DeleteClientsSecrets(ctx context.Context, params *DeleteClientsSecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientsSecrets request
	GetClientsSecrets(ctx context.Context, params *GetClientsSecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchClientsSecretsWithBody request with any body
	PatchClientsSecretsWithBody(ctx context.Context, params *PatchClientsSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchClientsSecrets(ctx context.Context, params *PatchClientsSecretsParams, body PatchClientsSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchClientsSecretsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchClientsSecretsParams, body PatchClientsSecretsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchClientsSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchClientsSecretsParams, body PatchClientsSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClientsSecretsWithBody request with any body
	PostClientsSecretsWithBody(ctx context.Context, params *PostClientsSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientsSecrets(ctx context.Context, params *PostClientsSecretsParams, body PostClientsSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientsSecretsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostClientsSecretsParams, body PostClientsSecretsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostClientsSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostClientsSecretsParams, body PostClientsSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironments request
	DeleteEnvironments(ctx context.Context, params *DeleteEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironments request
	GetEnvironments(ctx context.Context, params *GetEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchEnvironmentsWithBody request with any body
	PatchEnvironmentsWithBody(ctx context.Context, params *PatchEnvironmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchEnvironments(ctx context.Context, params *PatchEnvironmentsParams, body PatchEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchEnvironmentsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchEnvironmentsParams, body PatchEnvironmentsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchEnvironmentsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchEnvironmentsParams, body PatchEnvironmentsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEnvironmentsWithBody request with any body
	PostEnvironmentsWithBody(ctx context.Context, params *PostEnvironmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEnvironments(ctx context.Context, params *PostEnvironmentsParams, body PostEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEnvironmentsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostEnvironmentsParams, body PostEnvironmentsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEnvironmentsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostEnvironmentsParams, body PostEnvironmentsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProjects request
	DeleteProjects(ctx context.Context, params *DeleteProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjects request
	GetProjects(ctx context.Context, params *GetProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchProjectsWithBody request with any body
	PatchProjectsWithBody(ctx context.Context, params *PatchProjectsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchProjects(ctx context.Context, params *PatchProjectsParams, body PatchProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchProjectsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchProjectsParams, body PatchProjectsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchProjectsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchProjectsParams, body PatchProjectsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectsWithBody request with any body
	PostProjectsWithBody(ctx context.Context, params *PostProjectsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProjects(ctx context.Context, params *PostProjectsParams, body PostProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProjectsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostProjectsParams, body PostProjectsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProjectsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostProjectsParams, body PostProjectsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRpcSecrets request
	GetRpcSecrets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRpcSecretsWithBody request with any body
	PostRpcSecretsWithBody(ctx context.Context, params *PostRpcSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcSecrets(ctx context.Context, params *PostRpcSecretsParams, body PostRpcSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcSecretsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostRpcSecretsParams, body PostRpcSecretsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRpcSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostRpcSecretsParams, body PostRpcSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSecrets request
	DeleteSecrets(ctx context.Context, params *DeleteSecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSecrets request
	GetSecrets(ctx context.Context, params *GetSecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSecretsWithBody request with any body
	PatchSecretsWithBody(ctx context.Context, params *PatchSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSecrets(ctx context.Context, params *PatchSecretsParams, body PatchSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSecretsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchSecretsParams, body PatchSecretsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchSecretsParams, body PatchSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSecretsWithBody request with any body
	PostSecretsWithBody(ctx context.Context, params *PostSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSecrets(ctx context.Context, params *PostSecretsParams, body PostSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSecretsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostSecretsParams, body PostSecretsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostSecretsParams, body PostSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVariables request
	DeleteVariables(ctx context.Context, params *DeleteVariablesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVariables request
	GetVariables(ctx context.Context, params *GetVariablesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchVariablesWithBody request with any body
	PatchVariablesWithBody(ctx context.Context, params *PatchVariablesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchVariables(ctx context.Context, params *PatchVariablesParams, body PatchVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchVariablesWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchVariablesParams, body PatchVariablesApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchVariablesWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchVariablesParams, body PatchVariablesApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVariablesWithBody request with any body
	PostVariablesWithBody(ctx context.Context, params *PostVariablesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVariables(ctx context.Context, params *PostVariablesParams, body PostVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVariablesWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostVariablesParams, body PostVariablesApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVariablesWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostVariablesParams, body PostVariablesApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClients(ctx context.Context, params *DeleteClientsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClients(ctx context.Context, params *GetClientsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchClientsWithBody(ctx context.Context, params *PatchClientsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchClientsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchClients(ctx context.Context, params *PatchClientsParams, body PatchClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchClientsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchClientsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchClientsParams, body PatchClientsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchClientsRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchClientsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchClientsParams, body PatchClientsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchClientsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientsWithBody(ctx context.Context, params *PostClientsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClients(ctx context.Context, params *PostClientsParams, body PostClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostClientsParams, body PostClientsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientsRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostClientsParams, body PostClientsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClientsSecrets(ctx context.Context, params *DeleteClientsSecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientsSecretsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientsSecrets(ctx context.Context, params *GetClientsSecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientsSecretsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchClientsSecretsWithBody(ctx context.Context, params *PatchClientsSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchClientsSecretsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchClientsSecrets(ctx context.Context, params *PatchClientsSecretsParams, body PatchClientsSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchClientsSecretsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchClientsSecretsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchClientsSecretsParams, body PatchClientsSecretsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchClientsSecretsRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchClientsSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchClientsSecretsParams, body PatchClientsSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchClientsSecretsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientsSecretsWithBody(ctx context.Context, params *PostClientsSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientsSecretsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientsSecrets(ctx context.Context, params *PostClientsSecretsParams, body PostClientsSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientsSecretsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientsSecretsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostClientsSecretsParams, body PostClientsSecretsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientsSecretsRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClientsSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostClientsSecretsParams, body PostClientsSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClientsSecretsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironments(ctx context.Context, params *DeleteEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironments(ctx context.Context, params *GetEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchEnvironmentsWithBody(ctx context.Context, params *PatchEnvironmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchEnvironmentsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchEnvironments(ctx context.Context, params *PatchEnvironmentsParams, body PatchEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchEnvironmentsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchEnvironmentsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchEnvironmentsParams, body PatchEnvironmentsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchEnvironmentsRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchEnvironmentsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchEnvironmentsParams, body PatchEnvironmentsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchEnvironmentsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEnvironmentsWithBody(ctx context.Context, params *PostEnvironmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEnvironmentsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEnvironments(ctx context.Context, params *PostEnvironmentsParams, body PostEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEnvironmentsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEnvironmentsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostEnvironmentsParams, body PostEnvironmentsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEnvironmentsRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEnvironmentsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostEnvironmentsParams, body PostEnvironmentsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEnvironmentsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProjects(ctx context.Context, params *DeleteProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjects(ctx context.Context, params *GetProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchProjectsWithBody(ctx context.Context, params *PatchProjectsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchProjectsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchProjects(ctx context.Context, params *PatchProjectsParams, body PatchProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchProjectsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchProjectsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchProjectsParams, body PatchProjectsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchProjectsRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchProjectsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchProjectsParams, body PatchProjectsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchProjectsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsWithBody(ctx context.Context, params *PostProjectsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjects(ctx context.Context, params *PostProjectsParams, body PostProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostProjectsParams, body PostProjectsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostProjectsParams, body PostProjectsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRpcSecrets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRpcSecretsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcSecretsWithBody(ctx context.Context, params *PostRpcSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcSecretsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcSecrets(ctx context.Context, params *PostRpcSecretsParams, body PostRpcSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcSecretsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcSecretsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostRpcSecretsParams, body PostRpcSecretsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcSecretsRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRpcSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostRpcSecretsParams, body PostRpcSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRpcSecretsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSecrets(ctx context.Context, params *DeleteSecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSecretsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSecrets(ctx context.Context, params *GetSecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSecretsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSecretsWithBody(ctx context.Context, params *PatchSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSecretsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSecrets(ctx context.Context, params *PatchSecretsParams, body PatchSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSecretsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSecretsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchSecretsParams, body PatchSecretsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSecretsRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchSecretsParams, body PatchSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSecretsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecretsWithBody(ctx context.Context, params *PostSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecretsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecrets(ctx context.Context, params *PostSecretsParams, body PostSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecretsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecretsWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostSecretsParams, body PostSecretsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecretsRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostSecretsParams, body PostSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSecretsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVariables(ctx context.Context, params *DeleteVariablesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVariablesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVariables(ctx context.Context, params *GetVariablesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVariablesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchVariablesWithBody(ctx context.Context, params *PatchVariablesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchVariablesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchVariables(ctx context.Context, params *PatchVariablesParams, body PatchVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchVariablesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchVariablesWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PatchVariablesParams, body PatchVariablesApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchVariablesRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchVariablesWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PatchVariablesParams, body PatchVariablesApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchVariablesRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVariablesWithBody(ctx context.Context, params *PostVariablesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVariablesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVariables(ctx context.Context, params *PostVariablesParams, body PostVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVariablesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVariablesWithApplicationVndPgrstObjectPlusJSONBody(ctx context.Context, params *PostVariablesParams, body PostVariablesApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVariablesRequestWithApplicationVndPgrstObjectPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVariablesWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx context.Context, params *PostVariablesParams, body PostVariablesApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVariablesRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRequest generates requests for Get
func NewGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteClientsRequest generates requests for DeleteClients
func NewDeleteClientsRequest(server string, params *DeleteClientsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clients")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Display != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "display", runtime.ParamLocationQuery, *params.Display); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EnvironmentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment_id", runtime.ParamLocationQuery, *params.EnvironmentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewGetClientsRequest generates requests for GetClients
func NewGetClientsRequest(server string, params *GetClientsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clients")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Display != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "display", runtime.ParamLocationQuery, *params.Display); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EnvironmentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment_id", runtime.ParamLocationQuery, *params.EnvironmentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Range != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Range", runtime.ParamLocationHeader, *params.Range)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range", headerParam0)
		}

		if params.RangeUnit != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Range-Unit", runtime.ParamLocationHeader, *params.RangeUnit)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range-Unit", headerParam1)
		}

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewPatchClientsRequest calls the generic PatchClients builder with application/json body
func NewPatchClientsRequest(server string, params *PatchClientsParams, body PatchClientsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchClientsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPatchClientsRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PatchClients builder with application/vnd.pgrst.object+json body
func NewPatchClientsRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PatchClientsParams, body PatchClientsApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchClientsRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPatchClientsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PatchClients builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPatchClientsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PatchClientsParams, body PatchClientsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchClientsRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPatchClientsRequestWithBody generates requests for PatchClients with any type of body
func NewPatchClientsRequestWithBody(server string, params *PatchClientsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clients")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Display != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "display", runtime.ParamLocationQuery, *params.Display); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EnvironmentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment_id", runtime.ParamLocationQuery, *params.EnvironmentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewPostClientsRequest calls the generic PostClients builder with application/json body
func NewPostClientsRequest(server string, params *PostClientsParams, body PostClientsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostClientsRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostClients builder with application/vnd.pgrst.object+json body
func NewPostClientsRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostClientsParams, body PostClientsApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientsRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostClientsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostClients builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostClientsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostClientsParams, body PostClientsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientsRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostClientsRequestWithBody generates requests for PostClients with any type of body
func NewPostClientsRequestWithBody(server string, params *PostClientsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clients")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteClientsSecretsRequest generates requests for DeleteClientsSecrets
func NewDeleteClientsSecretsRequest(server string, params *DeleteClientsSecretsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clients_secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hash != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hash", runtime.ParamLocationQuery, *params.Hash); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClientId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, *params.ClientId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewGetClientsSecretsRequest generates requests for GetClientsSecrets
func NewGetClientsSecretsRequest(server string, params *GetClientsSecretsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clients_secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hash != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hash", runtime.ParamLocationQuery, *params.Hash); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClientId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, *params.ClientId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Range != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Range", runtime.ParamLocationHeader, *params.Range)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range", headerParam0)
		}

		if params.RangeUnit != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Range-Unit", runtime.ParamLocationHeader, *params.RangeUnit)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range-Unit", headerParam1)
		}

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewPatchClientsSecretsRequest calls the generic PatchClientsSecrets builder with application/json body
func NewPatchClientsSecretsRequest(server string, params *PatchClientsSecretsParams, body PatchClientsSecretsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchClientsSecretsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPatchClientsSecretsRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PatchClientsSecrets builder with application/vnd.pgrst.object+json body
func NewPatchClientsSecretsRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PatchClientsSecretsParams, body PatchClientsSecretsApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchClientsSecretsRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPatchClientsSecretsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PatchClientsSecrets builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPatchClientsSecretsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PatchClientsSecretsParams, body PatchClientsSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchClientsSecretsRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPatchClientsSecretsRequestWithBody generates requests for PatchClientsSecrets with any type of body
func NewPatchClientsSecretsRequestWithBody(server string, params *PatchClientsSecretsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clients_secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Hash != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hash", runtime.ParamLocationQuery, *params.Hash); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ClientId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, *params.ClientId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewPostClientsSecretsRequest calls the generic PostClientsSecrets builder with application/json body
func NewPostClientsSecretsRequest(server string, params *PostClientsSecretsParams, body PostClientsSecretsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientsSecretsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostClientsSecretsRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostClientsSecrets builder with application/vnd.pgrst.object+json body
func NewPostClientsSecretsRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostClientsSecretsParams, body PostClientsSecretsApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientsSecretsRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostClientsSecretsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostClientsSecrets builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostClientsSecretsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostClientsSecretsParams, body PostClientsSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClientsSecretsRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostClientsSecretsRequestWithBody generates requests for PostClientsSecrets with any type of body
func NewPostClientsSecretsRequestWithBody(server string, params *PostClientsSecretsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clients_secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteEnvironmentsRequest generates requests for DeleteEnvironments
func NewDeleteEnvironmentsRequest(server string, params *DeleteEnvironmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Display != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "display", runtime.ParamLocationQuery, *params.Display); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewGetEnvironmentsRequest generates requests for GetEnvironments
func NewGetEnvironmentsRequest(server string, params *GetEnvironmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Display != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "display", runtime.ParamLocationQuery, *params.Display); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Range != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Range", runtime.ParamLocationHeader, *params.Range)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range", headerParam0)
		}

		if params.RangeUnit != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Range-Unit", runtime.ParamLocationHeader, *params.RangeUnit)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range-Unit", headerParam1)
		}

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewPatchEnvironmentsRequest calls the generic PatchEnvironments builder with application/json body
func NewPatchEnvironmentsRequest(server string, params *PatchEnvironmentsParams, body PatchEnvironmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchEnvironmentsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPatchEnvironmentsRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PatchEnvironments builder with application/vnd.pgrst.object+json body
func NewPatchEnvironmentsRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PatchEnvironmentsParams, body PatchEnvironmentsApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchEnvironmentsRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPatchEnvironmentsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PatchEnvironments builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPatchEnvironmentsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PatchEnvironmentsParams, body PatchEnvironmentsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchEnvironmentsRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPatchEnvironmentsRequestWithBody generates requests for PatchEnvironments with any type of body
func NewPatchEnvironmentsRequestWithBody(server string, params *PatchEnvironmentsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Display != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "display", runtime.ParamLocationQuery, *params.Display); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewPostEnvironmentsRequest calls the generic PostEnvironments builder with application/json body
func NewPostEnvironmentsRequest(server string, params *PostEnvironmentsParams, body PostEnvironmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEnvironmentsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostEnvironmentsRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostEnvironments builder with application/vnd.pgrst.object+json body
func NewPostEnvironmentsRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostEnvironmentsParams, body PostEnvironmentsApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEnvironmentsRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostEnvironmentsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostEnvironments builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostEnvironmentsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostEnvironmentsParams, body PostEnvironmentsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEnvironmentsRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostEnvironmentsRequestWithBody generates requests for PostEnvironments with any type of body
func NewPostEnvironmentsRequestWithBody(server string, params *PostEnvironmentsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteProjectsRequest generates requests for DeleteProjects
func NewDeleteProjectsRequest(server string, params *DeleteProjectsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Display != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "display", runtime.ParamLocationQuery, *params.Display); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewGetProjectsRequest generates requests for GetProjects
func NewGetProjectsRequest(server string, params *GetProjectsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Display != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "display", runtime.ParamLocationQuery, *params.Display); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Range != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Range", runtime.ParamLocationHeader, *params.Range)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range", headerParam0)
		}

		if params.RangeUnit != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Range-Unit", runtime.ParamLocationHeader, *params.RangeUnit)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range-Unit", headerParam1)
		}

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewPatchProjectsRequest calls the generic PatchProjects builder with application/json body
func NewPatchProjectsRequest(server string, params *PatchProjectsParams, body PatchProjectsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchProjectsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPatchProjectsRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PatchProjects builder with application/vnd.pgrst.object+json body
func NewPatchProjectsRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PatchProjectsParams, body PatchProjectsApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchProjectsRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPatchProjectsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PatchProjects builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPatchProjectsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PatchProjectsParams, body PatchProjectsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchProjectsRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPatchProjectsRequestWithBody generates requests for PatchProjects with any type of body
func NewPatchProjectsRequestWithBody(server string, params *PatchProjectsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Display != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "display", runtime.ParamLocationQuery, *params.Display); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewPostProjectsRequest calls the generic PostProjects builder with application/json body
func NewPostProjectsRequest(server string, params *PostProjectsParams, body PostProjectsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProjectsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostProjectsRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostProjects builder with application/vnd.pgrst.object+json body
func NewPostProjectsRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostProjectsParams, body PostProjectsApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProjectsRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostProjectsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostProjects builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostProjectsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostProjectsParams, body PostProjectsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProjectsRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostProjectsRequestWithBody generates requests for PostProjects with any type of body
func NewPostProjectsRequestWithBody(server string, params *PostProjectsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewGetRpcSecretsRequest generates requests for GetRpcSecrets
func NewGetRpcSecretsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rpc/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRpcSecretsRequest calls the generic PostRpcSecrets builder with application/json body
func NewPostRpcSecretsRequest(server string, params *PostRpcSecretsParams, body PostRpcSecretsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcSecretsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostRpcSecretsRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostRpcSecrets builder with application/vnd.pgrst.object+json body
func NewPostRpcSecretsRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostRpcSecretsParams, body PostRpcSecretsApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcSecretsRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostRpcSecretsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostRpcSecrets builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostRpcSecretsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostRpcSecretsParams, body PostRpcSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRpcSecretsRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostRpcSecretsRequestWithBody generates requests for PostRpcSecrets with any type of body
func NewPostRpcSecretsRequestWithBody(server string, params *PostRpcSecretsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rpc/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteSecretsRequest generates requests for DeleteSecrets
func NewDeleteSecretsRequest(server string, params *DeleteSecretsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VariableId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "variable_id", runtime.ParamLocationQuery, *params.VariableId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EnvironmentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment_id", runtime.ParamLocationQuery, *params.EnvironmentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewGetSecretsRequest generates requests for GetSecrets
func NewGetSecretsRequest(server string, params *GetSecretsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VariableId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "variable_id", runtime.ParamLocationQuery, *params.VariableId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EnvironmentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment_id", runtime.ParamLocationQuery, *params.EnvironmentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Range != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Range", runtime.ParamLocationHeader, *params.Range)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range", headerParam0)
		}

		if params.RangeUnit != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Range-Unit", runtime.ParamLocationHeader, *params.RangeUnit)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range-Unit", headerParam1)
		}

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewPatchSecretsRequest calls the generic PatchSecrets builder with application/json body
func NewPatchSecretsRequest(server string, params *PatchSecretsParams, body PatchSecretsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSecretsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPatchSecretsRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PatchSecrets builder with application/vnd.pgrst.object+json body
func NewPatchSecretsRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PatchSecretsParams, body PatchSecretsApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSecretsRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPatchSecretsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PatchSecrets builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPatchSecretsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PatchSecretsParams, body PatchSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSecretsRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPatchSecretsRequestWithBody generates requests for PatchSecrets with any type of body
func NewPatchSecretsRequestWithBody(server string, params *PatchSecretsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VariableId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "variable_id", runtime.ParamLocationQuery, *params.VariableId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EnvironmentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment_id", runtime.ParamLocationQuery, *params.EnvironmentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewPostSecretsRequest calls the generic PostSecrets builder with application/json body
func NewPostSecretsRequest(server string, params *PostSecretsParams, body PostSecretsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSecretsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostSecretsRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostSecrets builder with application/vnd.pgrst.object+json body
func NewPostSecretsRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostSecretsParams, body PostSecretsApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSecretsRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostSecretsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostSecrets builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostSecretsRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostSecretsParams, body PostSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSecretsRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostSecretsRequestWithBody generates requests for PostSecrets with any type of body
func NewPostSecretsRequestWithBody(server string, params *PostSecretsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteVariablesRequest generates requests for DeleteVariables
func NewDeleteVariablesRequest(server string, params *DeleteVariablesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/variables")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GeneratorData != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "generator_data", runtime.ParamLocationQuery, *params.GeneratorData); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GeneratorType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "generator_type", runtime.ParamLocationQuery, *params.GeneratorType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewGetVariablesRequest generates requests for GetVariables
func NewGetVariablesRequest(server string, params *GetVariablesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/variables")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GeneratorData != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "generator_data", runtime.ParamLocationQuery, *params.GeneratorData); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GeneratorType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "generator_type", runtime.ParamLocationQuery, *params.GeneratorType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Range != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Range", runtime.ParamLocationHeader, *params.Range)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range", headerParam0)
		}

		if params.RangeUnit != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Range-Unit", runtime.ParamLocationHeader, *params.RangeUnit)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Range-Unit", headerParam1)
		}

		if params.Prefer != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam2)
		}

	}

	return req, nil
}

// NewPatchVariablesRequest calls the generic PatchVariables builder with application/json body
func NewPatchVariablesRequest(server string, params *PatchVariablesParams, body PatchVariablesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchVariablesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPatchVariablesRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PatchVariables builder with application/vnd.pgrst.object+json body
func NewPatchVariablesRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PatchVariablesParams, body PatchVariablesApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchVariablesRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPatchVariablesRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PatchVariables builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPatchVariablesRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PatchVariablesParams, body PatchVariablesApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchVariablesRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPatchVariablesRequestWithBody generates requests for PatchVariables with any type of body
func NewPatchVariablesRequestWithBody(server string, params *PatchVariablesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/variables")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GeneratorData != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "generator_data", runtime.ParamLocationQuery, *params.GeneratorData); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GeneratorType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "generator_type", runtime.ParamLocationQuery, *params.GeneratorType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project_id", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

// NewPostVariablesRequest calls the generic PostVariables builder with application/json body
func NewPostVariablesRequest(server string, params *PostVariablesParams, body PostVariablesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVariablesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostVariablesRequestWithApplicationVndPgrstObjectPlusJSONBody calls the generic PostVariables builder with application/vnd.pgrst.object+json body
func NewPostVariablesRequestWithApplicationVndPgrstObjectPlusJSONBody(server string, params *PostVariablesParams, body PostVariablesApplicationVndPgrstObjectPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVariablesRequestWithBody(server, params, "application/vnd.pgrst.object+json", bodyReader)
}

// NewPostVariablesRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody calls the generic PostVariables builder with application/vnd.pgrst.object+json;nulls=stripped body
func NewPostVariablesRequestWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(server string, params *PostVariablesParams, body PostVariablesApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVariablesRequestWithBody(server, params, "application/vnd.pgrst.object+json;nulls=stripped", bodyReader)
}

// NewPostVariablesRequestWithBody generates requests for PostVariables with any type of body
func NewPostVariablesRequestWithBody(server string, params *PostVariablesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/variables")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Prefer != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Prefer", runtime.ParamLocationHeader, *params.Prefer)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Prefer", headerParam0)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetWithResponse request
	GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// DeleteClientsWithResponse request
	DeleteClientsWithResponse(ctx context.Context, params *DeleteClientsParams, reqEditors ...RequestEditorFn) (*DeleteClientsResponse, error)

	// GetClientsWithResponse request
	GetClientsWithResponse(ctx context.Context, params *GetClientsParams, reqEditors ...RequestEditorFn) (*GetClientsResponse, error)

	// PatchClientsWithBodyWithResponse request with any body
	PatchClientsWithBodyWithResponse(ctx context.Context, params *PatchClientsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchClientsResponse, error)

	PatchClientsWithResponse(ctx context.Context, params *PatchClientsParams, body PatchClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchClientsResponse, error)

	PatchClientsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchClientsParams, body PatchClientsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchClientsResponse, error)

	PatchClientsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchClientsParams, body PatchClientsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchClientsResponse, error)

	// PostClientsWithBodyWithResponse request with any body
	PostClientsWithBodyWithResponse(ctx context.Context, params *PostClientsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientsResponse, error)

	PostClientsWithResponse(ctx context.Context, params *PostClientsParams, body PostClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientsResponse, error)

	PostClientsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostClientsParams, body PostClientsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientsResponse, error)

	PostClientsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostClientsParams, body PostClientsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostClientsResponse, error)

	// DeleteClientsSecretsWithResponse request
	DeleteClientsSecretsWithResponse(ctx context.Context, params *DeleteClientsSecretsParams, reqEditors ...RequestEditorFn) (*DeleteClientsSecretsResponse, error)

	// GetClientsSecretsWithResponse request
	GetClientsSecretsWithResponse(ctx context.Context, params *GetClientsSecretsParams, reqEditors ...RequestEditorFn) (*GetClientsSecretsResponse, error)

	// PatchClientsSecretsWithBodyWithResponse request with any body
	PatchClientsSecretsWithBodyWithResponse(ctx context.Context, params *PatchClientsSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchClientsSecretsResponse, error)

	PatchClientsSecretsWithResponse(ctx context.Context, params *PatchClientsSecretsParams, body PatchClientsSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchClientsSecretsResponse, error)

	PatchClientsSecretsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchClientsSecretsParams, body PatchClientsSecretsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchClientsSecretsResponse, error)

	PatchClientsSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchClientsSecretsParams, body PatchClientsSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchClientsSecretsResponse, error)

	// PostClientsSecretsWithBodyWithResponse request with any body
	PostClientsSecretsWithBodyWithResponse(ctx context.Context, params *PostClientsSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientsSecretsResponse, error)

	PostClientsSecretsWithResponse(ctx context.Context, params *PostClientsSecretsParams, body PostClientsSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientsSecretsResponse, error)

	PostClientsSecretsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostClientsSecretsParams, body PostClientsSecretsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientsSecretsResponse, error)

	PostClientsSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostClientsSecretsParams, body PostClientsSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostClientsSecretsResponse, error)

	// DeleteEnvironmentsWithResponse request
	DeleteEnvironmentsWithResponse(ctx context.Context, params *DeleteEnvironmentsParams, reqEditors ...RequestEditorFn) (*DeleteEnvironmentsResponse, error)

	// GetEnvironmentsWithResponse request
	GetEnvironmentsWithResponse(ctx context.Context, params *GetEnvironmentsParams, reqEditors ...RequestEditorFn) (*GetEnvironmentsResponse, error)

	// PatchEnvironmentsWithBodyWithResponse request with any body
	PatchEnvironmentsWithBodyWithResponse(ctx context.Context, params *PatchEnvironmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchEnvironmentsResponse, error)

	PatchEnvironmentsWithResponse(ctx context.Context, params *PatchEnvironmentsParams, body PatchEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchEnvironmentsResponse, error)

	PatchEnvironmentsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchEnvironmentsParams, body PatchEnvironmentsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchEnvironmentsResponse, error)

	PatchEnvironmentsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchEnvironmentsParams, body PatchEnvironmentsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchEnvironmentsResponse, error)

	// PostEnvironmentsWithBodyWithResponse request with any body
	PostEnvironmentsWithBodyWithResponse(ctx context.Context, params *PostEnvironmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEnvironmentsResponse, error)

	PostEnvironmentsWithResponse(ctx context.Context, params *PostEnvironmentsParams, body PostEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEnvironmentsResponse, error)

	PostEnvironmentsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostEnvironmentsParams, body PostEnvironmentsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEnvironmentsResponse, error)

	PostEnvironmentsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostEnvironmentsParams, body PostEnvironmentsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostEnvironmentsResponse, error)

	// DeleteProjectsWithResponse request
	DeleteProjectsWithResponse(ctx context.Context, params *DeleteProjectsParams, reqEditors ...RequestEditorFn) (*DeleteProjectsResponse, error)

	// GetProjectsWithResponse request
	GetProjectsWithResponse(ctx context.Context, params *GetProjectsParams, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error)

	// PatchProjectsWithBodyWithResponse request with any body
	PatchProjectsWithBodyWithResponse(ctx context.Context, params *PatchProjectsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchProjectsResponse, error)

	PatchProjectsWithResponse(ctx context.Context, params *PatchProjectsParams, body PatchProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchProjectsResponse, error)

	PatchProjectsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchProjectsParams, body PatchProjectsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchProjectsResponse, error)

	PatchProjectsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchProjectsParams, body PatchProjectsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchProjectsResponse, error)

	// PostProjectsWithBodyWithResponse request with any body
	PostProjectsWithBodyWithResponse(ctx context.Context, params *PostProjectsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsResponse, error)

	PostProjectsWithResponse(ctx context.Context, params *PostProjectsParams, body PostProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectsResponse, error)

	PostProjectsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostProjectsParams, body PostProjectsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectsResponse, error)

	PostProjectsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostProjectsParams, body PostProjectsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostProjectsResponse, error)

	// GetRpcSecretsWithResponse request
	GetRpcSecretsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRpcSecretsResponse, error)

	// PostRpcSecretsWithBodyWithResponse request with any body
	PostRpcSecretsWithBodyWithResponse(ctx context.Context, params *PostRpcSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRpcSecretsResponse, error)

	PostRpcSecretsWithResponse(ctx context.Context, params *PostRpcSecretsParams, body PostRpcSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcSecretsResponse, error)

	PostRpcSecretsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostRpcSecretsParams, body PostRpcSecretsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcSecretsResponse, error)

	PostRpcSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostRpcSecretsParams, body PostRpcSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostRpcSecretsResponse, error)

	// DeleteSecretsWithResponse request
	DeleteSecretsWithResponse(ctx context.Context, params *DeleteSecretsParams, reqEditors ...RequestEditorFn) (*DeleteSecretsResponse, error)

	// GetSecretsWithResponse request
	GetSecretsWithResponse(ctx context.Context, params *GetSecretsParams, reqEditors ...RequestEditorFn) (*GetSecretsResponse, error)

	// PatchSecretsWithBodyWithResponse request with any body
	PatchSecretsWithBodyWithResponse(ctx context.Context, params *PatchSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSecretsResponse, error)

	PatchSecretsWithResponse(ctx context.Context, params *PatchSecretsParams, body PatchSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSecretsResponse, error)

	PatchSecretsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchSecretsParams, body PatchSecretsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSecretsResponse, error)

	PatchSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchSecretsParams, body PatchSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchSecretsResponse, error)

	// PostSecretsWithBodyWithResponse request with any body
	PostSecretsWithBodyWithResponse(ctx context.Context, params *PostSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecretsResponse, error)

	PostSecretsWithResponse(ctx context.Context, params *PostSecretsParams, body PostSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecretsResponse, error)

	PostSecretsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostSecretsParams, body PostSecretsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecretsResponse, error)

	PostSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostSecretsParams, body PostSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostSecretsResponse, error)

	// DeleteVariablesWithResponse request
	DeleteVariablesWithResponse(ctx context.Context, params *DeleteVariablesParams, reqEditors ...RequestEditorFn) (*DeleteVariablesResponse, error)

	// GetVariablesWithResponse request
	GetVariablesWithResponse(ctx context.Context, params *GetVariablesParams, reqEditors ...RequestEditorFn) (*GetVariablesResponse, error)

	// PatchVariablesWithBodyWithResponse request with any body
	PatchVariablesWithBodyWithResponse(ctx context.Context, params *PatchVariablesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchVariablesResponse, error)

	PatchVariablesWithResponse(ctx context.Context, params *PatchVariablesParams, body PatchVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchVariablesResponse, error)

	PatchVariablesWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchVariablesParams, body PatchVariablesApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchVariablesResponse, error)

	PatchVariablesWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchVariablesParams, body PatchVariablesApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchVariablesResponse, error)

	// PostVariablesWithBodyWithResponse request with any body
	PostVariablesWithBodyWithResponse(ctx context.Context, params *PostVariablesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVariablesResponse, error)

	PostVariablesWithResponse(ctx context.Context, params *PostVariablesParams, body PostVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVariablesResponse, error)

	PostVariablesWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostVariablesParams, body PostVariablesApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVariablesResponse, error)

	PostVariablesWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostVariablesParams, body PostVariablesApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostVariablesResponse, error)
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientsResponse struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	JSON200                                       *[]Clients
	ApplicationvndPgrstObjectJSON200              *[]Clients
	ApplicationvndPgrstObjectJSONNullsStripped200 *[]Clients
}

// Status returns HTTPResponse.Status
func (r GetClientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchClientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchClientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchClientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostClientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClientsSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClientsSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClientsSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientsSecretsResponse struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	JSON200                                       *[]ClientsSecrets
	ApplicationvndPgrstObjectJSON200              *[]ClientsSecrets
	ApplicationvndPgrstObjectJSONNullsStripped200 *[]ClientsSecrets
}

// Status returns HTTPResponse.Status
func (r GetClientsSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientsSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchClientsSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchClientsSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchClientsSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClientsSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostClientsSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClientsSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentsResponse struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	JSON200                                       *[]Environments
	ApplicationvndPgrstObjectJSON200              *[]Environments
	ApplicationvndPgrstObjectJSONNullsStripped200 *[]Environments
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsResponse struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	JSON200                                       *[]Projects
	ApplicationvndPgrstObjectJSON200              *[]Projects
	ApplicationvndPgrstObjectJSONNullsStripped200 *[]Projects
}

// Status returns HTTPResponse.Status
func (r GetProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRpcSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRpcSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRpcSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRpcSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRpcSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRpcSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSecretsResponse struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	JSON200                                       *[]Secrets
	ApplicationvndPgrstObjectJSON200              *[]Secrets
	ApplicationvndPgrstObjectJSONNullsStripped200 *[]Secrets
}

// Status returns HTTPResponse.Status
func (r GetSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVariablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteVariablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVariablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVariablesResponse struct {
	Body                                          []byte
	HTTPResponse                                  *http.Response
	JSON200                                       *[]Variables
	ApplicationvndPgrstObjectJSON200              *[]Variables
	ApplicationvndPgrstObjectJSONNullsStripped200 *[]Variables
}

// Status returns HTTPResponse.Status
func (r GetVariablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVariablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchVariablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchVariablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchVariablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVariablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVariablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVariablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// DeleteClientsWithResponse request returning *DeleteClientsResponse
func (c *ClientWithResponses) DeleteClientsWithResponse(ctx context.Context, params *DeleteClientsParams, reqEditors ...RequestEditorFn) (*DeleteClientsResponse, error) {
	rsp, err := c.DeleteClients(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientsResponse(rsp)
}

// GetClientsWithResponse request returning *GetClientsResponse
func (c *ClientWithResponses) GetClientsWithResponse(ctx context.Context, params *GetClientsParams, reqEditors ...RequestEditorFn) (*GetClientsResponse, error) {
	rsp, err := c.GetClients(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientsResponse(rsp)
}

// PatchClientsWithBodyWithResponse request with arbitrary body returning *PatchClientsResponse
func (c *ClientWithResponses) PatchClientsWithBodyWithResponse(ctx context.Context, params *PatchClientsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchClientsResponse, error) {
	rsp, err := c.PatchClientsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchClientsResponse(rsp)
}

func (c *ClientWithResponses) PatchClientsWithResponse(ctx context.Context, params *PatchClientsParams, body PatchClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchClientsResponse, error) {
	rsp, err := c.PatchClients(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchClientsResponse(rsp)
}

func (c *ClientWithResponses) PatchClientsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchClientsParams, body PatchClientsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchClientsResponse, error) {
	rsp, err := c.PatchClientsWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchClientsResponse(rsp)
}

func (c *ClientWithResponses) PatchClientsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchClientsParams, body PatchClientsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchClientsResponse, error) {
	rsp, err := c.PatchClientsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchClientsResponse(rsp)
}

// PostClientsWithBodyWithResponse request with arbitrary body returning *PostClientsResponse
func (c *ClientWithResponses) PostClientsWithBodyWithResponse(ctx context.Context, params *PostClientsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientsResponse, error) {
	rsp, err := c.PostClientsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientsResponse(rsp)
}

func (c *ClientWithResponses) PostClientsWithResponse(ctx context.Context, params *PostClientsParams, body PostClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientsResponse, error) {
	rsp, err := c.PostClients(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientsResponse(rsp)
}

func (c *ClientWithResponses) PostClientsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostClientsParams, body PostClientsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientsResponse, error) {
	rsp, err := c.PostClientsWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientsResponse(rsp)
}

func (c *ClientWithResponses) PostClientsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostClientsParams, body PostClientsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostClientsResponse, error) {
	rsp, err := c.PostClientsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientsResponse(rsp)
}

// DeleteClientsSecretsWithResponse request returning *DeleteClientsSecretsResponse
func (c *ClientWithResponses) DeleteClientsSecretsWithResponse(ctx context.Context, params *DeleteClientsSecretsParams, reqEditors ...RequestEditorFn) (*DeleteClientsSecretsResponse, error) {
	rsp, err := c.DeleteClientsSecrets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientsSecretsResponse(rsp)
}

// GetClientsSecretsWithResponse request returning *GetClientsSecretsResponse
func (c *ClientWithResponses) GetClientsSecretsWithResponse(ctx context.Context, params *GetClientsSecretsParams, reqEditors ...RequestEditorFn) (*GetClientsSecretsResponse, error) {
	rsp, err := c.GetClientsSecrets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientsSecretsResponse(rsp)
}

// PatchClientsSecretsWithBodyWithResponse request with arbitrary body returning *PatchClientsSecretsResponse
func (c *ClientWithResponses) PatchClientsSecretsWithBodyWithResponse(ctx context.Context, params *PatchClientsSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchClientsSecretsResponse, error) {
	rsp, err := c.PatchClientsSecretsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchClientsSecretsResponse(rsp)
}

func (c *ClientWithResponses) PatchClientsSecretsWithResponse(ctx context.Context, params *PatchClientsSecretsParams, body PatchClientsSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchClientsSecretsResponse, error) {
	rsp, err := c.PatchClientsSecrets(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchClientsSecretsResponse(rsp)
}

func (c *ClientWithResponses) PatchClientsSecretsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchClientsSecretsParams, body PatchClientsSecretsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchClientsSecretsResponse, error) {
	rsp, err := c.PatchClientsSecretsWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchClientsSecretsResponse(rsp)
}

func (c *ClientWithResponses) PatchClientsSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchClientsSecretsParams, body PatchClientsSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchClientsSecretsResponse, error) {
	rsp, err := c.PatchClientsSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchClientsSecretsResponse(rsp)
}

// PostClientsSecretsWithBodyWithResponse request with arbitrary body returning *PostClientsSecretsResponse
func (c *ClientWithResponses) PostClientsSecretsWithBodyWithResponse(ctx context.Context, params *PostClientsSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostClientsSecretsResponse, error) {
	rsp, err := c.PostClientsSecretsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientsSecretsResponse(rsp)
}

func (c *ClientWithResponses) PostClientsSecretsWithResponse(ctx context.Context, params *PostClientsSecretsParams, body PostClientsSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientsSecretsResponse, error) {
	rsp, err := c.PostClientsSecrets(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientsSecretsResponse(rsp)
}

func (c *ClientWithResponses) PostClientsSecretsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostClientsSecretsParams, body PostClientsSecretsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostClientsSecretsResponse, error) {
	rsp, err := c.PostClientsSecretsWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientsSecretsResponse(rsp)
}

func (c *ClientWithResponses) PostClientsSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostClientsSecretsParams, body PostClientsSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostClientsSecretsResponse, error) {
	rsp, err := c.PostClientsSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClientsSecretsResponse(rsp)
}

// DeleteEnvironmentsWithResponse request returning *DeleteEnvironmentsResponse
func (c *ClientWithResponses) DeleteEnvironmentsWithResponse(ctx context.Context, params *DeleteEnvironmentsParams, reqEditors ...RequestEditorFn) (*DeleteEnvironmentsResponse, error) {
	rsp, err := c.DeleteEnvironments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentsResponse(rsp)
}

// GetEnvironmentsWithResponse request returning *GetEnvironmentsResponse
func (c *ClientWithResponses) GetEnvironmentsWithResponse(ctx context.Context, params *GetEnvironmentsParams, reqEditors ...RequestEditorFn) (*GetEnvironmentsResponse, error) {
	rsp, err := c.GetEnvironments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentsResponse(rsp)
}

// PatchEnvironmentsWithBodyWithResponse request with arbitrary body returning *PatchEnvironmentsResponse
func (c *ClientWithResponses) PatchEnvironmentsWithBodyWithResponse(ctx context.Context, params *PatchEnvironmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchEnvironmentsResponse, error) {
	rsp, err := c.PatchEnvironmentsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchEnvironmentsResponse(rsp)
}

func (c *ClientWithResponses) PatchEnvironmentsWithResponse(ctx context.Context, params *PatchEnvironmentsParams, body PatchEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchEnvironmentsResponse, error) {
	rsp, err := c.PatchEnvironments(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchEnvironmentsResponse(rsp)
}

func (c *ClientWithResponses) PatchEnvironmentsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchEnvironmentsParams, body PatchEnvironmentsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchEnvironmentsResponse, error) {
	rsp, err := c.PatchEnvironmentsWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchEnvironmentsResponse(rsp)
}

func (c *ClientWithResponses) PatchEnvironmentsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchEnvironmentsParams, body PatchEnvironmentsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchEnvironmentsResponse, error) {
	rsp, err := c.PatchEnvironmentsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchEnvironmentsResponse(rsp)
}

// PostEnvironmentsWithBodyWithResponse request with arbitrary body returning *PostEnvironmentsResponse
func (c *ClientWithResponses) PostEnvironmentsWithBodyWithResponse(ctx context.Context, params *PostEnvironmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEnvironmentsResponse, error) {
	rsp, err := c.PostEnvironmentsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEnvironmentsResponse(rsp)
}

func (c *ClientWithResponses) PostEnvironmentsWithResponse(ctx context.Context, params *PostEnvironmentsParams, body PostEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEnvironmentsResponse, error) {
	rsp, err := c.PostEnvironments(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEnvironmentsResponse(rsp)
}

func (c *ClientWithResponses) PostEnvironmentsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostEnvironmentsParams, body PostEnvironmentsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEnvironmentsResponse, error) {
	rsp, err := c.PostEnvironmentsWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEnvironmentsResponse(rsp)
}

func (c *ClientWithResponses) PostEnvironmentsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostEnvironmentsParams, body PostEnvironmentsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostEnvironmentsResponse, error) {
	rsp, err := c.PostEnvironmentsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEnvironmentsResponse(rsp)
}

// DeleteProjectsWithResponse request returning *DeleteProjectsResponse
func (c *ClientWithResponses) DeleteProjectsWithResponse(ctx context.Context, params *DeleteProjectsParams, reqEditors ...RequestEditorFn) (*DeleteProjectsResponse, error) {
	rsp, err := c.DeleteProjects(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectsResponse(rsp)
}

// GetProjectsWithResponse request returning *GetProjectsResponse
func (c *ClientWithResponses) GetProjectsWithResponse(ctx context.Context, params *GetProjectsParams, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error) {
	rsp, err := c.GetProjects(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsResponse(rsp)
}

// PatchProjectsWithBodyWithResponse request with arbitrary body returning *PatchProjectsResponse
func (c *ClientWithResponses) PatchProjectsWithBodyWithResponse(ctx context.Context, params *PatchProjectsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchProjectsResponse, error) {
	rsp, err := c.PatchProjectsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchProjectsResponse(rsp)
}

func (c *ClientWithResponses) PatchProjectsWithResponse(ctx context.Context, params *PatchProjectsParams, body PatchProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchProjectsResponse, error) {
	rsp, err := c.PatchProjects(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchProjectsResponse(rsp)
}

func (c *ClientWithResponses) PatchProjectsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchProjectsParams, body PatchProjectsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchProjectsResponse, error) {
	rsp, err := c.PatchProjectsWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchProjectsResponse(rsp)
}

func (c *ClientWithResponses) PatchProjectsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchProjectsParams, body PatchProjectsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchProjectsResponse, error) {
	rsp, err := c.PatchProjectsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchProjectsResponse(rsp)
}

// PostProjectsWithBodyWithResponse request with arbitrary body returning *PostProjectsResponse
func (c *ClientWithResponses) PostProjectsWithBodyWithResponse(ctx context.Context, params *PostProjectsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsResponse, error) {
	rsp, err := c.PostProjectsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsResponse(rsp)
}

func (c *ClientWithResponses) PostProjectsWithResponse(ctx context.Context, params *PostProjectsParams, body PostProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectsResponse, error) {
	rsp, err := c.PostProjects(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsResponse(rsp)
}

func (c *ClientWithResponses) PostProjectsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostProjectsParams, body PostProjectsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectsResponse, error) {
	rsp, err := c.PostProjectsWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsResponse(rsp)
}

func (c *ClientWithResponses) PostProjectsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostProjectsParams, body PostProjectsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostProjectsResponse, error) {
	rsp, err := c.PostProjectsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsResponse(rsp)
}

// GetRpcSecretsWithResponse request returning *GetRpcSecretsResponse
func (c *ClientWithResponses) GetRpcSecretsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRpcSecretsResponse, error) {
	rsp, err := c.GetRpcSecrets(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRpcSecretsResponse(rsp)
}

// PostRpcSecretsWithBodyWithResponse request with arbitrary body returning *PostRpcSecretsResponse
func (c *ClientWithResponses) PostRpcSecretsWithBodyWithResponse(ctx context.Context, params *PostRpcSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRpcSecretsResponse, error) {
	rsp, err := c.PostRpcSecretsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcSecretsResponse(rsp)
}

func (c *ClientWithResponses) PostRpcSecretsWithResponse(ctx context.Context, params *PostRpcSecretsParams, body PostRpcSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcSecretsResponse, error) {
	rsp, err := c.PostRpcSecrets(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcSecretsResponse(rsp)
}

func (c *ClientWithResponses) PostRpcSecretsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostRpcSecretsParams, body PostRpcSecretsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRpcSecretsResponse, error) {
	rsp, err := c.PostRpcSecretsWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcSecretsResponse(rsp)
}

func (c *ClientWithResponses) PostRpcSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostRpcSecretsParams, body PostRpcSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostRpcSecretsResponse, error) {
	rsp, err := c.PostRpcSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRpcSecretsResponse(rsp)
}

// DeleteSecretsWithResponse request returning *DeleteSecretsResponse
func (c *ClientWithResponses) DeleteSecretsWithResponse(ctx context.Context, params *DeleteSecretsParams, reqEditors ...RequestEditorFn) (*DeleteSecretsResponse, error) {
	rsp, err := c.DeleteSecrets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSecretsResponse(rsp)
}

// GetSecretsWithResponse request returning *GetSecretsResponse
func (c *ClientWithResponses) GetSecretsWithResponse(ctx context.Context, params *GetSecretsParams, reqEditors ...RequestEditorFn) (*GetSecretsResponse, error) {
	rsp, err := c.GetSecrets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSecretsResponse(rsp)
}

// PatchSecretsWithBodyWithResponse request with arbitrary body returning *PatchSecretsResponse
func (c *ClientWithResponses) PatchSecretsWithBodyWithResponse(ctx context.Context, params *PatchSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSecretsResponse, error) {
	rsp, err := c.PatchSecretsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSecretsResponse(rsp)
}

func (c *ClientWithResponses) PatchSecretsWithResponse(ctx context.Context, params *PatchSecretsParams, body PatchSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSecretsResponse, error) {
	rsp, err := c.PatchSecrets(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSecretsResponse(rsp)
}

func (c *ClientWithResponses) PatchSecretsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchSecretsParams, body PatchSecretsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSecretsResponse, error) {
	rsp, err := c.PatchSecretsWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSecretsResponse(rsp)
}

func (c *ClientWithResponses) PatchSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchSecretsParams, body PatchSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchSecretsResponse, error) {
	rsp, err := c.PatchSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSecretsResponse(rsp)
}

// PostSecretsWithBodyWithResponse request with arbitrary body returning *PostSecretsResponse
func (c *ClientWithResponses) PostSecretsWithBodyWithResponse(ctx context.Context, params *PostSecretsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSecretsResponse, error) {
	rsp, err := c.PostSecretsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecretsResponse(rsp)
}

func (c *ClientWithResponses) PostSecretsWithResponse(ctx context.Context, params *PostSecretsParams, body PostSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecretsResponse, error) {
	rsp, err := c.PostSecrets(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecretsResponse(rsp)
}

func (c *ClientWithResponses) PostSecretsWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostSecretsParams, body PostSecretsApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSecretsResponse, error) {
	rsp, err := c.PostSecretsWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecretsResponse(rsp)
}

func (c *ClientWithResponses) PostSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostSecretsParams, body PostSecretsApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostSecretsResponse, error) {
	rsp, err := c.PostSecretsWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSecretsResponse(rsp)
}

// DeleteVariablesWithResponse request returning *DeleteVariablesResponse
func (c *ClientWithResponses) DeleteVariablesWithResponse(ctx context.Context, params *DeleteVariablesParams, reqEditors ...RequestEditorFn) (*DeleteVariablesResponse, error) {
	rsp, err := c.DeleteVariables(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVariablesResponse(rsp)
}

// GetVariablesWithResponse request returning *GetVariablesResponse
func (c *ClientWithResponses) GetVariablesWithResponse(ctx context.Context, params *GetVariablesParams, reqEditors ...RequestEditorFn) (*GetVariablesResponse, error) {
	rsp, err := c.GetVariables(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVariablesResponse(rsp)
}

// PatchVariablesWithBodyWithResponse request with arbitrary body returning *PatchVariablesResponse
func (c *ClientWithResponses) PatchVariablesWithBodyWithResponse(ctx context.Context, params *PatchVariablesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchVariablesResponse, error) {
	rsp, err := c.PatchVariablesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchVariablesResponse(rsp)
}

func (c *ClientWithResponses) PatchVariablesWithResponse(ctx context.Context, params *PatchVariablesParams, body PatchVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchVariablesResponse, error) {
	rsp, err := c.PatchVariables(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchVariablesResponse(rsp)
}

func (c *ClientWithResponses) PatchVariablesWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PatchVariablesParams, body PatchVariablesApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchVariablesResponse, error) {
	rsp, err := c.PatchVariablesWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchVariablesResponse(rsp)
}

func (c *ClientWithResponses) PatchVariablesWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PatchVariablesParams, body PatchVariablesApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PatchVariablesResponse, error) {
	rsp, err := c.PatchVariablesWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchVariablesResponse(rsp)
}

// PostVariablesWithBodyWithResponse request with arbitrary body returning *PostVariablesResponse
func (c *ClientWithResponses) PostVariablesWithBodyWithResponse(ctx context.Context, params *PostVariablesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVariablesResponse, error) {
	rsp, err := c.PostVariablesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVariablesResponse(rsp)
}

func (c *ClientWithResponses) PostVariablesWithResponse(ctx context.Context, params *PostVariablesParams, body PostVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVariablesResponse, error) {
	rsp, err := c.PostVariables(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVariablesResponse(rsp)
}

func (c *ClientWithResponses) PostVariablesWithApplicationVndPgrstObjectPlusJSONBodyWithResponse(ctx context.Context, params *PostVariablesParams, body PostVariablesApplicationVndPgrstObjectPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVariablesResponse, error) {
	rsp, err := c.PostVariablesWithApplicationVndPgrstObjectPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVariablesResponse(rsp)
}

func (c *ClientWithResponses) PostVariablesWithApplicationVndPgrstObjectPlusJSONNullsStrippedBodyWithResponse(ctx context.Context, params *PostVariablesParams, body PostVariablesApplicationVndPgrstObjectPlusJSONNullsStrippedRequestBody, reqEditors ...RequestEditorFn) (*PostVariablesResponse, error) {
	rsp, err := c.PostVariablesWithApplicationVndPgrstObjectPlusJSONNullsStrippedBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVariablesResponse(rsp)
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteClientsResponse parses an HTTP response from a DeleteClientsWithResponse call
func ParseDeleteClientsResponse(rsp *http.Response) (*DeleteClientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientsResponse parses an HTTP response from a GetClientsWithResponse call
func ParseGetClientsResponse(rsp *http.Response) (*GetClientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest []Clients
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json" && rsp.StatusCode == 200:
		var dest []Clients
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json;nulls=stripped" && rsp.StatusCode == 200:
		var dest []Clients
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSONNullsStripped200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParsePatchClientsResponse parses an HTTP response from a PatchClientsWithResponse call
func ParsePatchClientsResponse(rsp *http.Response) (*PatchClientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchClientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostClientsResponse parses an HTTP response from a PostClientsWithResponse call
func ParsePostClientsResponse(rsp *http.Response) (*PostClientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteClientsSecretsResponse parses an HTTP response from a DeleteClientsSecretsWithResponse call
func ParseDeleteClientsSecretsResponse(rsp *http.Response) (*DeleteClientsSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClientsSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetClientsSecretsResponse parses an HTTP response from a GetClientsSecretsWithResponse call
func ParseGetClientsSecretsResponse(rsp *http.Response) (*GetClientsSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientsSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest []ClientsSecrets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json" && rsp.StatusCode == 200:
		var dest []ClientsSecrets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json;nulls=stripped" && rsp.StatusCode == 200:
		var dest []ClientsSecrets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSONNullsStripped200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParsePatchClientsSecretsResponse parses an HTTP response from a PatchClientsSecretsWithResponse call
func ParsePatchClientsSecretsResponse(rsp *http.Response) (*PatchClientsSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchClientsSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostClientsSecretsResponse parses an HTTP response from a PostClientsSecretsWithResponse call
func ParsePostClientsSecretsResponse(rsp *http.Response) (*PostClientsSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClientsSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteEnvironmentsResponse parses an HTTP response from a DeleteEnvironmentsWithResponse call
func ParseDeleteEnvironmentsResponse(rsp *http.Response) (*DeleteEnvironmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEnvironmentsResponse parses an HTTP response from a GetEnvironmentsWithResponse call
func ParseGetEnvironmentsResponse(rsp *http.Response) (*GetEnvironmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest []Environments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json" && rsp.StatusCode == 200:
		var dest []Environments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json;nulls=stripped" && rsp.StatusCode == 200:
		var dest []Environments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSONNullsStripped200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParsePatchEnvironmentsResponse parses an HTTP response from a PatchEnvironmentsWithResponse call
func ParsePatchEnvironmentsResponse(rsp *http.Response) (*PatchEnvironmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostEnvironmentsResponse parses an HTTP response from a PostEnvironmentsWithResponse call
func ParsePostEnvironmentsResponse(rsp *http.Response) (*PostEnvironmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteProjectsResponse parses an HTTP response from a DeleteProjectsWithResponse call
func ParseDeleteProjectsResponse(rsp *http.Response) (*DeleteProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProjectsResponse parses an HTTP response from a GetProjectsWithResponse call
func ParseGetProjectsResponse(rsp *http.Response) (*GetProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest []Projects
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json" && rsp.StatusCode == 200:
		var dest []Projects
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json;nulls=stripped" && rsp.StatusCode == 200:
		var dest []Projects
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSONNullsStripped200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParsePatchProjectsResponse parses an HTTP response from a PatchProjectsWithResponse call
func ParsePatchProjectsResponse(rsp *http.Response) (*PatchProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostProjectsResponse parses an HTTP response from a PostProjectsWithResponse call
func ParsePostProjectsResponse(rsp *http.Response) (*PostProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRpcSecretsResponse parses an HTTP response from a GetRpcSecretsWithResponse call
func ParseGetRpcSecretsResponse(rsp *http.Response) (*GetRpcSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRpcSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRpcSecretsResponse parses an HTTP response from a PostRpcSecretsWithResponse call
func ParsePostRpcSecretsResponse(rsp *http.Response) (*PostRpcSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRpcSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteSecretsResponse parses an HTTP response from a DeleteSecretsWithResponse call
func ParseDeleteSecretsResponse(rsp *http.Response) (*DeleteSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSecretsResponse parses an HTTP response from a GetSecretsWithResponse call
func ParseGetSecretsResponse(rsp *http.Response) (*GetSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest []Secrets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json" && rsp.StatusCode == 200:
		var dest []Secrets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json;nulls=stripped" && rsp.StatusCode == 200:
		var dest []Secrets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSONNullsStripped200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParsePatchSecretsResponse parses an HTTP response from a PatchSecretsWithResponse call
func ParsePatchSecretsResponse(rsp *http.Response) (*PatchSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSecretsResponse parses an HTTP response from a PostSecretsWithResponse call
func ParsePostSecretsResponse(rsp *http.Response) (*PostSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteVariablesResponse parses an HTTP response from a DeleteVariablesWithResponse call
func ParseDeleteVariablesResponse(rsp *http.Response) (*DeleteVariablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVariablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVariablesResponse parses an HTTP response from a GetVariablesWithResponse call
func ParseGetVariablesResponse(rsp *http.Response) (*GetVariablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVariablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest []Variables
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json" && rsp.StatusCode == 200:
		var dest []Variables
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/vnd.pgrst.object+json;nulls=stripped" && rsp.StatusCode == 200:
		var dest []Variables
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndPgrstObjectJSONNullsStripped200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParsePatchVariablesResponse parses an HTTP response from a PatchVariablesWithResponse call
func ParsePatchVariablesResponse(rsp *http.Response) (*PatchVariablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchVariablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostVariablesResponse parses an HTTP response from a PostVariablesWithResponse call
func ParsePostVariablesResponse(rsp *http.Response) (*PostVariablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVariablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
