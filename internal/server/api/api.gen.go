// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for Error.
type Error struct {
	Description string `json:"description"`
	Error       string `json:"error"`
}

// ID defines model for ID.
type ID struct {
	Id openapi_types.UUID `json:"id"`
}

// Secret defines model for Secret.
type Secret struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// Secrets defines model for Secrets.
type Secrets = []Secret

// BadRequest defines model for BadRequest.
type BadRequest = Error

// Forbidden defines model for Forbidden.
type Forbidden = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// PostV1AdminProjectsJSONBody defines parameters for PostV1AdminProjects.
type PostV1AdminProjectsJSONBody struct {
	// Name project name (must be unique)
	Name string `json:"name"`
}

// PostV1AdminProjectsProjectIdEnvironmentsJSONBody defines parameters for PostV1AdminProjectsProjectIdEnvironments.
type PostV1AdminProjectsProjectIdEnvironmentsJSONBody struct {
	// Name project name (must be unique)
	Name string `json:"name"`
}

// PostV1AdminProjectsJSONRequestBody defines body for PostV1AdminProjects for application/json ContentType.
type PostV1AdminProjectsJSONRequestBody PostV1AdminProjectsJSONBody

// PostV1AdminProjectsProjectIdEnvironmentsJSONRequestBody defines body for PostV1AdminProjectsProjectIdEnvironments for application/json ContentType.
type PostV1AdminProjectsProjectIdEnvironmentsJSONRequestBody PostV1AdminProjectsProjectIdEnvironmentsJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV1AdminHealth request
	GetV1AdminHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1AdminProjectsWithBody request with any body
	PostV1AdminProjectsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1AdminProjects(ctx context.Context, body PostV1AdminProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1AdminProjectsProjectIdEnvironmentsWithBody request with any body
	PostV1AdminProjectsProjectIdEnvironmentsWithBody(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1AdminProjectsProjectIdEnvironments(ctx context.Context, projectId openapi_types.UUID, body PostV1AdminProjectsProjectIdEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ClientsSelf request
	GetV1ClientsSelf(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Projects request
	GetV1Projects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecrets request
	GetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecrets(ctx context.Context, projectId openapi_types.UUID, environmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetV1AdminHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AdminHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AdminProjectsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AdminProjectsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AdminProjects(ctx context.Context, body PostV1AdminProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AdminProjectsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AdminProjectsProjectIdEnvironmentsWithBody(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AdminProjectsProjectIdEnvironmentsRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AdminProjectsProjectIdEnvironments(ctx context.Context, projectId openapi_types.UUID, body PostV1AdminProjectsProjectIdEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AdminProjectsProjectIdEnvironmentsRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ClientsSelf(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ClientsSelfRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Projects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecrets(ctx context.Context, projectId openapi_types.UUID, environmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecretsRequest(c.Server, projectId, environmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetV1AdminHealthRequest generates requests for GetV1AdminHealth
func NewGetV1AdminHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/admin/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1AdminProjectsRequest calls the generic PostV1AdminProjects builder with application/json body
func NewPostV1AdminProjectsRequest(server string, body PostV1AdminProjectsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1AdminProjectsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1AdminProjectsRequestWithBody generates requests for PostV1AdminProjects with any type of body
func NewPostV1AdminProjectsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/admin/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1AdminProjectsProjectIdEnvironmentsRequest calls the generic PostV1AdminProjectsProjectIdEnvironments builder with application/json body
func NewPostV1AdminProjectsProjectIdEnvironmentsRequest(server string, projectId openapi_types.UUID, body PostV1AdminProjectsProjectIdEnvironmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1AdminProjectsProjectIdEnvironmentsRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewPostV1AdminProjectsProjectIdEnvironmentsRequestWithBody generates requests for PostV1AdminProjectsProjectIdEnvironments with any type of body
func NewPostV1AdminProjectsProjectIdEnvironmentsRequestWithBody(server string, projectId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/admin/projects/%s/environments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ClientsSelfRequest generates requests for GetV1ClientsSelf
func NewGetV1ClientsSelfRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clients/_self")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsRequest generates requests for GetV1Projects
func NewGetV1ProjectsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecretsRequest generates requests for GetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecrets
func NewGetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecretsRequest(server string, projectId openapi_types.UUID, environmentId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environment_id", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/environments/%s/secrets", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV1AdminHealthWithResponse request
	GetV1AdminHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AdminHealthResponse, error)

	// PostV1AdminProjectsWithBodyWithResponse request with any body
	PostV1AdminProjectsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AdminProjectsResponse, error)

	PostV1AdminProjectsWithResponse(ctx context.Context, body PostV1AdminProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AdminProjectsResponse, error)

	// PostV1AdminProjectsProjectIdEnvironmentsWithBodyWithResponse request with any body
	PostV1AdminProjectsProjectIdEnvironmentsWithBodyWithResponse(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AdminProjectsProjectIdEnvironmentsResponse, error)

	PostV1AdminProjectsProjectIdEnvironmentsWithResponse(ctx context.Context, projectId openapi_types.UUID, body PostV1AdminProjectsProjectIdEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AdminProjectsProjectIdEnvironmentsResponse, error)

	// GetV1ClientsSelfWithResponse request
	GetV1ClientsSelfWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1ClientsSelfResponse, error)

	// GetV1ProjectsWithResponse request
	GetV1ProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1ProjectsResponse, error)

	// GetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecretsWithResponse request
	GetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecretsWithResponse(ctx context.Context, projectId openapi_types.UUID, environmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecretsResponse, error)
}

type GetV1AdminHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Status    *string `json:"status,omitempty"`
		Timestamp *string `json:"timestamp,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON500 *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetV1AdminHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AdminHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1AdminProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id *string `json:"id,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON500 *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PostV1AdminProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1AdminProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1AdminProjectsProjectIdEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id *string `json:"id,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON500 *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PostV1AdminProjectsProjectIdEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1AdminProjectsProjectIdEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ClientsSelfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt *string             `json:"created_at,omitempty"`
		Display   *string             `json:"display,omitempty"`
		Id        *openapi_types.UUID `json:"id,omitempty"`
		ProjectId *openapi_types.UUID `json:"project_id,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON500 *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetV1ClientsSelfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ClientsSelfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Display string `json:"display"`
		Id      string `json:"id"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON500 *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Secrets
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV1AdminHealthWithResponse request returning *GetV1AdminHealthResponse
func (c *ClientWithResponses) GetV1AdminHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AdminHealthResponse, error) {
	rsp, err := c.GetV1AdminHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AdminHealthResponse(rsp)
}

// PostV1AdminProjectsWithBodyWithResponse request with arbitrary body returning *PostV1AdminProjectsResponse
func (c *ClientWithResponses) PostV1AdminProjectsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AdminProjectsResponse, error) {
	rsp, err := c.PostV1AdminProjectsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AdminProjectsResponse(rsp)
}

func (c *ClientWithResponses) PostV1AdminProjectsWithResponse(ctx context.Context, body PostV1AdminProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AdminProjectsResponse, error) {
	rsp, err := c.PostV1AdminProjects(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AdminProjectsResponse(rsp)
}

// PostV1AdminProjectsProjectIdEnvironmentsWithBodyWithResponse request with arbitrary body returning *PostV1AdminProjectsProjectIdEnvironmentsResponse
func (c *ClientWithResponses) PostV1AdminProjectsProjectIdEnvironmentsWithBodyWithResponse(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AdminProjectsProjectIdEnvironmentsResponse, error) {
	rsp, err := c.PostV1AdminProjectsProjectIdEnvironmentsWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AdminProjectsProjectIdEnvironmentsResponse(rsp)
}

func (c *ClientWithResponses) PostV1AdminProjectsProjectIdEnvironmentsWithResponse(ctx context.Context, projectId openapi_types.UUID, body PostV1AdminProjectsProjectIdEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AdminProjectsProjectIdEnvironmentsResponse, error) {
	rsp, err := c.PostV1AdminProjectsProjectIdEnvironments(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AdminProjectsProjectIdEnvironmentsResponse(rsp)
}

// GetV1ClientsSelfWithResponse request returning *GetV1ClientsSelfResponse
func (c *ClientWithResponses) GetV1ClientsSelfWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1ClientsSelfResponse, error) {
	rsp, err := c.GetV1ClientsSelf(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ClientsSelfResponse(rsp)
}

// GetV1ProjectsWithResponse request returning *GetV1ProjectsResponse
func (c *ClientWithResponses) GetV1ProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1ProjectsResponse, error) {
	rsp, err := c.GetV1Projects(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsResponse(rsp)
}

// GetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecretsWithResponse request returning *GetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecretsResponse
func (c *ClientWithResponses) GetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecretsWithResponse(ctx context.Context, projectId openapi_types.UUID, environmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecretsResponse, error) {
	rsp, err := c.GetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecrets(ctx, projectId, environmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecretsResponse(rsp)
}

// ParseGetV1AdminHealthResponse parses an HTTP response from a GetV1AdminHealthWithResponse call
func ParseGetV1AdminHealthResponse(rsp *http.Response) (*GetV1AdminHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AdminHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Status    *string `json:"status,omitempty"`
			Timestamp *string `json:"timestamp,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV1AdminProjectsResponse parses an HTTP response from a PostV1AdminProjectsWithResponse call
func ParsePostV1AdminProjectsResponse(rsp *http.Response) (*PostV1AdminProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1AdminProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id *string `json:"id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV1AdminProjectsProjectIdEnvironmentsResponse parses an HTTP response from a PostV1AdminProjectsProjectIdEnvironmentsWithResponse call
func ParsePostV1AdminProjectsProjectIdEnvironmentsResponse(rsp *http.Response) (*PostV1AdminProjectsProjectIdEnvironmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1AdminProjectsProjectIdEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id *string `json:"id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1ClientsSelfResponse parses an HTTP response from a GetV1ClientsSelfWithResponse call
func ParseGetV1ClientsSelfResponse(rsp *http.Response) (*GetV1ClientsSelfResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ClientsSelfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt *string             `json:"created_at,omitempty"`
			Display   *string             `json:"display,omitempty"`
			Id        *openapi_types.UUID `json:"id,omitempty"`
			ProjectId *openapi_types.UUID `json:"project_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsResponse parses an HTTP response from a GetV1ProjectsWithResponse call
func ParseGetV1ProjectsResponse(rsp *http.Response) (*GetV1ProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Display string `json:"display"`
			Id      string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecretsResponse parses an HTTP response from a GetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecretsWithResponse call
func ParseGetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecretsResponse(rsp *http.Response) (*GetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Secrets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get health
	// (GET /v1/admin/health)
	GetV1AdminHealth(c *gin.Context)
	// Create project
	// (POST /v1/admin/projects)
	PostV1AdminProjects(c *gin.Context)
	// Create environment
	// (POST /v1/admin/projects/{project_id}/environments)
	PostV1AdminProjectsProjectIdEnvironments(c *gin.Context, projectId openapi_types.UUID)
	// Get self
	// (GET /v1/clients/_self)
	GetV1ClientsSelf(c *gin.Context)
	// List projects
	// (GET /v1/projects)
	GetV1Projects(c *gin.Context)
	// List secrets
	// (GET /v1/projects/{project_id}/environments/{environment_id}/secrets)
	GetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecrets(c *gin.Context, projectId openapi_types.UUID, environmentId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetV1AdminHealth operation middleware
func (siw *ServerInterfaceWrapper) GetV1AdminHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1AdminHealth(c)
}

// PostV1AdminProjects operation middleware
func (siw *ServerInterfaceWrapper) PostV1AdminProjects(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1AdminProjects(c)
}

// PostV1AdminProjectsProjectIdEnvironments operation middleware
func (siw *ServerInterfaceWrapper) PostV1AdminProjectsProjectIdEnvironments(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1AdminProjectsProjectIdEnvironments(c, projectId)
}

// GetV1ClientsSelf operation middleware
func (siw *ServerInterfaceWrapper) GetV1ClientsSelf(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1ClientsSelf(c)
}

// GetV1Projects operation middleware
func (siw *ServerInterfaceWrapper) GetV1Projects(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1Projects(c)
}

// GetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecrets operation middleware
func (siw *ServerInterfaceWrapper) GetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecrets(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "environment_id" -------------
	var environmentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "environment_id", c.Param("environment_id"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environment_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecrets(c, projectId, environmentId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/admin/health", wrapper.GetV1AdminHealth)
	router.POST(options.BaseURL+"/v1/admin/projects", wrapper.PostV1AdminProjects)
	router.POST(options.BaseURL+"/v1/admin/projects/:project_id/environments", wrapper.PostV1AdminProjectsProjectIdEnvironments)
	router.GET(options.BaseURL+"/v1/clients/_self", wrapper.GetV1ClientsSelf)
	router.GET(options.BaseURL+"/v1/projects", wrapper.GetV1Projects)
	router.GET(options.BaseURL+"/v1/projects/:project_id/environments/:environment_id/secrets", wrapper.GetV1ProjectsProjectIdEnvironmentsEnvironmentIdSecrets)
}
