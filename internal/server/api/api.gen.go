// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for GeneratorType.
const (
	GeneratorTypeRANDOM GeneratorType = "RANDOM"
	GeneratorTypeSTATIC GeneratorType = "STATIC"
)

// Defines values for SecretGeneratorRandomType.
const (
	SecretGeneratorRandomTypeRANDOM SecretGeneratorRandomType = "RANDOM"
)

// Defines values for SecretGeneratorStaticType.
const (
	STATIC SecretGeneratorStaticType = "STATIC"
)

// ClientRepresentation defines model for ClientRepresentation.
type ClientRepresentation struct {
	CreatedAt     string             `json:"created_at"`
	Display       string             `json:"display"`
	EnvironmentId openapi_types.UUID `json:"environment_id"`
	Id            openapi_types.UUID `json:"id"`
}

// Environment defines model for Environment.
type Environment struct {
	Display string `json:"display"`
	Id      string `json:"id"`
}

// Environments defines model for Environments.
type Environments = []Environment

// Error defines model for Error.
type Error struct {
	Description string `json:"description"`
	Error       string `json:"error"`
}

// GeneratorType defines model for GeneratorType.
type GeneratorType string

// ID defines model for ID.
type ID struct {
	Id openapi_types.UUID `json:"id"`
}

// RandomGeneratorData defines model for RandomGeneratorData.
type RandomGeneratorData struct {
	Length  float32 `json:"length"`
	Letters bool    `json:"letters"`
	Numbers bool    `json:"numbers"`
	Symbols bool    `json:"symbols"`
}

// Secret Binding of a Secret to a Variable and an Environment (with nested Project), modeled in a single schema.
type Secret struct {
	Environment struct {
		Display string             `json:"display"`
		Id      openapi_types.UUID `json:"id"`
		Project struct {
			Display string             `json:"display"`
			Id      openapi_types.UUID `json:"id"`
		} `json:"project"`
	} `json:"environment"`
	Id       openapi_types.UUID `json:"id"`
	Value    string             `json:"value"`
	Variable struct {
		Id openapi_types.UUID `json:"id"`

		// Key Variable key/name (e.g., "HOST")
		Key string `json:"key"`
	} `json:"variable"`
}

// SecretGenerator defines model for SecretGenerator.
type SecretGenerator struct {
	union json.RawMessage
}

// SecretGeneratorBase defines model for SecretGeneratorBase.
type SecretGeneratorBase struct {
	Data interface{}   `json:"data"`
	Type GeneratorType `json:"type"`
}

// SecretGeneratorRandom defines model for SecretGeneratorRandom.
type SecretGeneratorRandom struct {
	Data RandomGeneratorData       `json:"data"`
	Type SecretGeneratorRandomType `json:"type"`
}

// SecretGeneratorRandomType defines model for SecretGeneratorRandom.Type.
type SecretGeneratorRandomType string

// SecretGeneratorStatic defines model for SecretGeneratorStatic.
type SecretGeneratorStatic struct {
	Data StaticGeneratorData       `json:"data"`
	Type SecretGeneratorStaticType `json:"type"`
}

// SecretGeneratorStaticType defines model for SecretGeneratorStatic.Type.
type SecretGeneratorStaticType string

// Secrets defines model for Secrets.
type Secrets = []Secret

// StaticGeneratorData defines model for StaticGeneratorData.
type StaticGeneratorData = string

// Variable defines model for Variable.
type Variable struct {
	Description string `json:"description"`

	// GeneratorData arbitrary generator data payload, based on type
	GeneratorData Variable_GeneratorData `json:"generator_data"`
	GeneratorType GeneratorType          `json:"generator_type"`
	Id            openapi_types.UUID     `json:"id"`
	Key           string                 `json:"key"`
	ProjectId     openapi_types.UUID     `json:"project_id"`
}

// VariableGeneratorData0 defines model for .
type VariableGeneratorData0 = map[string]interface{}

// VariableGeneratorData1 defines model for .
type VariableGeneratorData1 = string

// VariableGeneratorData2 defines model for .
type VariableGeneratorData2 = float32

// VariableGeneratorData3 defines model for .
type VariableGeneratorData3 = bool

// VariableGeneratorData4 defines model for .
type VariableGeneratorData4 = []interface{}

// Variable_GeneratorData arbitrary generator data payload, based on type
type Variable_GeneratorData struct {
	union json.RawMessage
}

// Variables defines model for Variables.
type Variables = []Variable

// BadRequest defines model for BadRequest.
type BadRequest = Error

// CreateClientResponse defines model for CreateClientResponse.
type CreateClientResponse struct {
	Id     openapi_types.UUID `json:"id"`
	Secret struct {
		Id  openapi_types.UUID `json:"id"`
		Key string             `json:"key"`
	} `json:"secret"`
}

// Forbidden defines model for Forbidden.
type Forbidden = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// CreateVariableRequestBody defines model for CreateVariableRequestBody.
type CreateVariableRequestBody struct {
	Generator SecretGenerator `json:"generator"`

	// Key the key in the environment
	Key string `json:"key"`
}

// PostV1ProjectsJSONBody defines parameters for PostV1Projects.
type PostV1ProjectsJSONBody struct {
	// Name project name (must be unique)
	Name string `json:"name"`
}

// PostV1ProjectsEnvironmentsEnvironmentIdClientsJSONBody defines parameters for PostV1ProjectsEnvironmentsEnvironmentIdClients.
type PostV1ProjectsEnvironmentsEnvironmentIdClientsJSONBody struct {
	// Name client name
	Name string `json:"name"`
}

// PostV1ProjectsProjectIdEnvironmentsJSONBody defines parameters for PostV1ProjectsProjectIdEnvironments.
type PostV1ProjectsProjectIdEnvironmentsJSONBody struct {
	// Name project name (must be unique)
	Name string `json:"name"`
}

// PostV1ProjectsProjectIdVariablesJSONBody defines parameters for PostV1ProjectsProjectIdVariables.
type PostV1ProjectsProjectIdVariablesJSONBody struct {
	Generator SecretGenerator `json:"generator"`

	// Key the key in the environment
	Key string `json:"key"`
}

// PostV1ProjectsJSONRequestBody defines body for PostV1Projects for application/json ContentType.
type PostV1ProjectsJSONRequestBody PostV1ProjectsJSONBody

// PostV1ProjectsEnvironmentsEnvironmentIdClientsJSONRequestBody defines body for PostV1ProjectsEnvironmentsEnvironmentIdClients for application/json ContentType.
type PostV1ProjectsEnvironmentsEnvironmentIdClientsJSONRequestBody PostV1ProjectsEnvironmentsEnvironmentIdClientsJSONBody

// PostV1ProjectsProjectIdEnvironmentsJSONRequestBody defines body for PostV1ProjectsProjectIdEnvironments for application/json ContentType.
type PostV1ProjectsProjectIdEnvironmentsJSONRequestBody PostV1ProjectsProjectIdEnvironmentsJSONBody

// PostV1ProjectsProjectIdVariablesJSONRequestBody defines body for PostV1ProjectsProjectIdVariables for application/json ContentType.
type PostV1ProjectsProjectIdVariablesJSONRequestBody PostV1ProjectsProjectIdVariablesJSONBody

// AsSecretGeneratorStatic returns the union data inside the SecretGenerator as a SecretGeneratorStatic
func (t SecretGenerator) AsSecretGeneratorStatic() (SecretGeneratorStatic, error) {
	var body SecretGeneratorStatic
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSecretGeneratorStatic overwrites any union data inside the SecretGenerator as the provided SecretGeneratorStatic
func (t *SecretGenerator) FromSecretGeneratorStatic(v SecretGeneratorStatic) error {
	v.Type = "STATIC"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSecretGeneratorStatic performs a merge with any union data inside the SecretGenerator, using the provided SecretGeneratorStatic
func (t *SecretGenerator) MergeSecretGeneratorStatic(v SecretGeneratorStatic) error {
	v.Type = "STATIC"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSecretGeneratorRandom returns the union data inside the SecretGenerator as a SecretGeneratorRandom
func (t SecretGenerator) AsSecretGeneratorRandom() (SecretGeneratorRandom, error) {
	var body SecretGeneratorRandom
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSecretGeneratorRandom overwrites any union data inside the SecretGenerator as the provided SecretGeneratorRandom
func (t *SecretGenerator) FromSecretGeneratorRandom(v SecretGeneratorRandom) error {
	v.Type = "RANDOM"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSecretGeneratorRandom performs a merge with any union data inside the SecretGenerator, using the provided SecretGeneratorRandom
func (t *SecretGenerator) MergeSecretGeneratorRandom(v SecretGeneratorRandom) error {
	v.Type = "RANDOM"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SecretGenerator) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t SecretGenerator) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "RANDOM":
		return t.AsSecretGeneratorRandom()
	case "STATIC":
		return t.AsSecretGeneratorStatic()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t SecretGenerator) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SecretGenerator) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVariableGeneratorData0 returns the union data inside the Variable_GeneratorData as a VariableGeneratorData0
func (t Variable_GeneratorData) AsVariableGeneratorData0() (VariableGeneratorData0, error) {
	var body VariableGeneratorData0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVariableGeneratorData0 overwrites any union data inside the Variable_GeneratorData as the provided VariableGeneratorData0
func (t *Variable_GeneratorData) FromVariableGeneratorData0(v VariableGeneratorData0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVariableGeneratorData0 performs a merge with any union data inside the Variable_GeneratorData, using the provided VariableGeneratorData0
func (t *Variable_GeneratorData) MergeVariableGeneratorData0(v VariableGeneratorData0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVariableGeneratorData1 returns the union data inside the Variable_GeneratorData as a VariableGeneratorData1
func (t Variable_GeneratorData) AsVariableGeneratorData1() (VariableGeneratorData1, error) {
	var body VariableGeneratorData1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVariableGeneratorData1 overwrites any union data inside the Variable_GeneratorData as the provided VariableGeneratorData1
func (t *Variable_GeneratorData) FromVariableGeneratorData1(v VariableGeneratorData1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVariableGeneratorData1 performs a merge with any union data inside the Variable_GeneratorData, using the provided VariableGeneratorData1
func (t *Variable_GeneratorData) MergeVariableGeneratorData1(v VariableGeneratorData1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVariableGeneratorData2 returns the union data inside the Variable_GeneratorData as a VariableGeneratorData2
func (t Variable_GeneratorData) AsVariableGeneratorData2() (VariableGeneratorData2, error) {
	var body VariableGeneratorData2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVariableGeneratorData2 overwrites any union data inside the Variable_GeneratorData as the provided VariableGeneratorData2
func (t *Variable_GeneratorData) FromVariableGeneratorData2(v VariableGeneratorData2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVariableGeneratorData2 performs a merge with any union data inside the Variable_GeneratorData, using the provided VariableGeneratorData2
func (t *Variable_GeneratorData) MergeVariableGeneratorData2(v VariableGeneratorData2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVariableGeneratorData3 returns the union data inside the Variable_GeneratorData as a VariableGeneratorData3
func (t Variable_GeneratorData) AsVariableGeneratorData3() (VariableGeneratorData3, error) {
	var body VariableGeneratorData3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVariableGeneratorData3 overwrites any union data inside the Variable_GeneratorData as the provided VariableGeneratorData3
func (t *Variable_GeneratorData) FromVariableGeneratorData3(v VariableGeneratorData3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVariableGeneratorData3 performs a merge with any union data inside the Variable_GeneratorData, using the provided VariableGeneratorData3
func (t *Variable_GeneratorData) MergeVariableGeneratorData3(v VariableGeneratorData3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVariableGeneratorData4 returns the union data inside the Variable_GeneratorData as a VariableGeneratorData4
func (t Variable_GeneratorData) AsVariableGeneratorData4() (VariableGeneratorData4, error) {
	var body VariableGeneratorData4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVariableGeneratorData4 overwrites any union data inside the Variable_GeneratorData as the provided VariableGeneratorData4
func (t *Variable_GeneratorData) FromVariableGeneratorData4(v VariableGeneratorData4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVariableGeneratorData4 performs a merge with any union data inside the Variable_GeneratorData, using the provided VariableGeneratorData4
func (t *Variable_GeneratorData) MergeVariableGeneratorData4(v VariableGeneratorData4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Variable_GeneratorData) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Variable_GeneratorData) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV1AdminHealth request
	GetV1AdminHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ClientsSelf request
	GetV1ClientsSelf(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ClientsSecrets request
	GetV1ClientsSecrets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1EnvironmentsEnvironmentIdSecrets request
	GetV1EnvironmentsEnvironmentIdSecrets(ctx context.Context, environmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Projects request
	GetV1Projects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsWithBody request with any body
	PostV1ProjectsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Projects(ctx context.Context, body PostV1ProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsEnvironmentsEnvironmentIdClientsWithBody request with any body
	PostV1ProjectsEnvironmentsEnvironmentIdClientsWithBody(ctx context.Context, environmentId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ProjectsEnvironmentsEnvironmentIdClients(ctx context.Context, environmentId openapi_types.UUID, body PostV1ProjectsEnvironmentsEnvironmentIdClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectIdEnvironments request
	GetV1ProjectsProjectIdEnvironments(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectIdEnvironmentsWithBody request with any body
	PostV1ProjectsProjectIdEnvironmentsWithBody(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ProjectsProjectIdEnvironments(ctx context.Context, projectId openapi_types.UUID, body PostV1ProjectsProjectIdEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ProjectsProjectIdVariables request
	GetV1ProjectsProjectIdVariables(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ProjectsProjectIdVariablesWithBody request with any body
	PostV1ProjectsProjectIdVariablesWithBody(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ProjectsProjectIdVariables(ctx context.Context, projectId openapi_types.UUID, body PostV1ProjectsProjectIdVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetV1AdminHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AdminHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ClientsSelf(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ClientsSelfRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ClientsSecrets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ClientsSecretsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1EnvironmentsEnvironmentIdSecrets(ctx context.Context, environmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1EnvironmentsEnvironmentIdSecretsRequest(c.Server, environmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Projects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Projects(ctx context.Context, body PostV1ProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsEnvironmentsEnvironmentIdClientsWithBody(ctx context.Context, environmentId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsEnvironmentsEnvironmentIdClientsRequestWithBody(c.Server, environmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsEnvironmentsEnvironmentIdClients(ctx context.Context, environmentId openapi_types.UUID, body PostV1ProjectsEnvironmentsEnvironmentIdClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsEnvironmentsEnvironmentIdClientsRequest(c.Server, environmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectIdEnvironments(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectIdEnvironmentsRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectIdEnvironmentsWithBody(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectIdEnvironmentsRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectIdEnvironments(ctx context.Context, projectId openapi_types.UUID, body PostV1ProjectsProjectIdEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectIdEnvironmentsRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ProjectsProjectIdVariables(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ProjectsProjectIdVariablesRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectIdVariablesWithBody(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectIdVariablesRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ProjectsProjectIdVariables(ctx context.Context, projectId openapi_types.UUID, body PostV1ProjectsProjectIdVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ProjectsProjectIdVariablesRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetV1AdminHealthRequest generates requests for GetV1AdminHealth
func NewGetV1AdminHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/admin/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ClientsSelfRequest generates requests for GetV1ClientsSelf
func NewGetV1ClientsSelfRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clients/_self")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ClientsSecretsRequest generates requests for GetV1ClientsSecrets
func NewGetV1ClientsSecretsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clients/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1EnvironmentsEnvironmentIdSecretsRequest generates requests for GetV1EnvironmentsEnvironmentIdSecrets
func NewGetV1EnvironmentsEnvironmentIdSecretsRequest(server string, environmentId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "environment_id", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/environments/%s/secrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ProjectsRequest generates requests for GetV1Projects
func NewGetV1ProjectsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ProjectsRequest calls the generic PostV1Projects builder with application/json body
func NewPostV1ProjectsRequest(server string, body PostV1ProjectsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1ProjectsRequestWithBody generates requests for PostV1Projects with any type of body
func NewPostV1ProjectsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1ProjectsEnvironmentsEnvironmentIdClientsRequest calls the generic PostV1ProjectsEnvironmentsEnvironmentIdClients builder with application/json body
func NewPostV1ProjectsEnvironmentsEnvironmentIdClientsRequest(server string, environmentId openapi_types.UUID, body PostV1ProjectsEnvironmentsEnvironmentIdClientsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsEnvironmentsEnvironmentIdClientsRequestWithBody(server, environmentId, "application/json", bodyReader)
}

// NewPostV1ProjectsEnvironmentsEnvironmentIdClientsRequestWithBody generates requests for PostV1ProjectsEnvironmentsEnvironmentIdClients with any type of body
func NewPostV1ProjectsEnvironmentsEnvironmentIdClientsRequestWithBody(server string, environmentId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "environment_id", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/_/environments/%s/clients", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ProjectsProjectIdEnvironmentsRequest generates requests for GetV1ProjectsProjectIdEnvironments
func NewGetV1ProjectsProjectIdEnvironmentsRequest(server string, projectId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/environments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ProjectsProjectIdEnvironmentsRequest calls the generic PostV1ProjectsProjectIdEnvironments builder with application/json body
func NewPostV1ProjectsProjectIdEnvironmentsRequest(server string, projectId openapi_types.UUID, body PostV1ProjectsProjectIdEnvironmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsProjectIdEnvironmentsRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewPostV1ProjectsProjectIdEnvironmentsRequestWithBody generates requests for PostV1ProjectsProjectIdEnvironments with any type of body
func NewPostV1ProjectsProjectIdEnvironmentsRequestWithBody(server string, projectId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/environments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ProjectsProjectIdVariablesRequest generates requests for GetV1ProjectsProjectIdVariables
func NewGetV1ProjectsProjectIdVariablesRequest(server string, projectId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/variables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ProjectsProjectIdVariablesRequest calls the generic PostV1ProjectsProjectIdVariables builder with application/json body
func NewPostV1ProjectsProjectIdVariablesRequest(server string, projectId openapi_types.UUID, body PostV1ProjectsProjectIdVariablesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ProjectsProjectIdVariablesRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewPostV1ProjectsProjectIdVariablesRequestWithBody generates requests for PostV1ProjectsProjectIdVariables with any type of body
func NewPostV1ProjectsProjectIdVariablesRequestWithBody(server string, projectId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/variables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV1AdminHealthWithResponse request
	GetV1AdminHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AdminHealthResponse, error)

	// GetV1ClientsSelfWithResponse request
	GetV1ClientsSelfWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1ClientsSelfResponse, error)

	// GetV1ClientsSecretsWithResponse request
	GetV1ClientsSecretsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1ClientsSecretsResponse, error)

	// GetV1EnvironmentsEnvironmentIdSecretsWithResponse request
	GetV1EnvironmentsEnvironmentIdSecretsWithResponse(ctx context.Context, environmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1EnvironmentsEnvironmentIdSecretsResponse, error)

	// GetV1ProjectsWithResponse request
	GetV1ProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1ProjectsResponse, error)

	// PostV1ProjectsWithBodyWithResponse request with any body
	PostV1ProjectsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsResponse, error)

	PostV1ProjectsWithResponse(ctx context.Context, body PostV1ProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsResponse, error)

	// PostV1ProjectsEnvironmentsEnvironmentIdClientsWithBodyWithResponse request with any body
	PostV1ProjectsEnvironmentsEnvironmentIdClientsWithBodyWithResponse(ctx context.Context, environmentId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsEnvironmentsEnvironmentIdClientsResponse, error)

	PostV1ProjectsEnvironmentsEnvironmentIdClientsWithResponse(ctx context.Context, environmentId openapi_types.UUID, body PostV1ProjectsEnvironmentsEnvironmentIdClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsEnvironmentsEnvironmentIdClientsResponse, error)

	// GetV1ProjectsProjectIdEnvironmentsWithResponse request
	GetV1ProjectsProjectIdEnvironmentsWithResponse(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdEnvironmentsResponse, error)

	// PostV1ProjectsProjectIdEnvironmentsWithBodyWithResponse request with any body
	PostV1ProjectsProjectIdEnvironmentsWithBodyWithResponse(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdEnvironmentsResponse, error)

	PostV1ProjectsProjectIdEnvironmentsWithResponse(ctx context.Context, projectId openapi_types.UUID, body PostV1ProjectsProjectIdEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdEnvironmentsResponse, error)

	// GetV1ProjectsProjectIdVariablesWithResponse request
	GetV1ProjectsProjectIdVariablesWithResponse(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdVariablesResponse, error)

	// PostV1ProjectsProjectIdVariablesWithBodyWithResponse request with any body
	PostV1ProjectsProjectIdVariablesWithBodyWithResponse(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdVariablesResponse, error)

	PostV1ProjectsProjectIdVariablesWithResponse(ctx context.Context, projectId openapi_types.UUID, body PostV1ProjectsProjectIdVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdVariablesResponse, error)
}

type GetV1AdminHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Status    *string `json:"status,omitempty"`
		Timestamp *string `json:"timestamp,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON500 *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetV1AdminHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AdminHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ClientsSelfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientRepresentation
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetV1ClientsSelfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ClientsSelfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ClientsSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Secrets
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetV1ClientsSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ClientsSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1EnvironmentsEnvironmentIdSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Secrets
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetV1EnvironmentsEnvironmentIdSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1EnvironmentsEnvironmentIdSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Display string `json:"display"`
		Id      string `json:"id"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON500 *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ID
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsEnvironmentsEnvironmentIdClientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateClientResponse
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsEnvironmentsEnvironmentIdClientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsEnvironmentsEnvironmentIdClientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectIdEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Environments
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectIdEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectIdEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectIdEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ID
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectIdEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectIdEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ProjectsProjectIdVariablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Variables
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetV1ProjectsProjectIdVariablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ProjectsProjectIdVariablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ProjectsProjectIdVariablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ID
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PostV1ProjectsProjectIdVariablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ProjectsProjectIdVariablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV1AdminHealthWithResponse request returning *GetV1AdminHealthResponse
func (c *ClientWithResponses) GetV1AdminHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AdminHealthResponse, error) {
	rsp, err := c.GetV1AdminHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AdminHealthResponse(rsp)
}

// GetV1ClientsSelfWithResponse request returning *GetV1ClientsSelfResponse
func (c *ClientWithResponses) GetV1ClientsSelfWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1ClientsSelfResponse, error) {
	rsp, err := c.GetV1ClientsSelf(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ClientsSelfResponse(rsp)
}

// GetV1ClientsSecretsWithResponse request returning *GetV1ClientsSecretsResponse
func (c *ClientWithResponses) GetV1ClientsSecretsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1ClientsSecretsResponse, error) {
	rsp, err := c.GetV1ClientsSecrets(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ClientsSecretsResponse(rsp)
}

// GetV1EnvironmentsEnvironmentIdSecretsWithResponse request returning *GetV1EnvironmentsEnvironmentIdSecretsResponse
func (c *ClientWithResponses) GetV1EnvironmentsEnvironmentIdSecretsWithResponse(ctx context.Context, environmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1EnvironmentsEnvironmentIdSecretsResponse, error) {
	rsp, err := c.GetV1EnvironmentsEnvironmentIdSecrets(ctx, environmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1EnvironmentsEnvironmentIdSecretsResponse(rsp)
}

// GetV1ProjectsWithResponse request returning *GetV1ProjectsResponse
func (c *ClientWithResponses) GetV1ProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1ProjectsResponse, error) {
	rsp, err := c.GetV1Projects(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsResponse(rsp)
}

// PostV1ProjectsWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsResponse
func (c *ClientWithResponses) PostV1ProjectsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsResponse, error) {
	rsp, err := c.PostV1ProjectsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsWithResponse(ctx context.Context, body PostV1ProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsResponse, error) {
	rsp, err := c.PostV1Projects(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsResponse(rsp)
}

// PostV1ProjectsEnvironmentsEnvironmentIdClientsWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsEnvironmentsEnvironmentIdClientsResponse
func (c *ClientWithResponses) PostV1ProjectsEnvironmentsEnvironmentIdClientsWithBodyWithResponse(ctx context.Context, environmentId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsEnvironmentsEnvironmentIdClientsResponse, error) {
	rsp, err := c.PostV1ProjectsEnvironmentsEnvironmentIdClientsWithBody(ctx, environmentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsEnvironmentsEnvironmentIdClientsResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsEnvironmentsEnvironmentIdClientsWithResponse(ctx context.Context, environmentId openapi_types.UUID, body PostV1ProjectsEnvironmentsEnvironmentIdClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsEnvironmentsEnvironmentIdClientsResponse, error) {
	rsp, err := c.PostV1ProjectsEnvironmentsEnvironmentIdClients(ctx, environmentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsEnvironmentsEnvironmentIdClientsResponse(rsp)
}

// GetV1ProjectsProjectIdEnvironmentsWithResponse request returning *GetV1ProjectsProjectIdEnvironmentsResponse
func (c *ClientWithResponses) GetV1ProjectsProjectIdEnvironmentsWithResponse(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdEnvironmentsResponse, error) {
	rsp, err := c.GetV1ProjectsProjectIdEnvironments(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectIdEnvironmentsResponse(rsp)
}

// PostV1ProjectsProjectIdEnvironmentsWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsProjectIdEnvironmentsResponse
func (c *ClientWithResponses) PostV1ProjectsProjectIdEnvironmentsWithBodyWithResponse(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdEnvironmentsResponse, error) {
	rsp, err := c.PostV1ProjectsProjectIdEnvironmentsWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectIdEnvironmentsResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsProjectIdEnvironmentsWithResponse(ctx context.Context, projectId openapi_types.UUID, body PostV1ProjectsProjectIdEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdEnvironmentsResponse, error) {
	rsp, err := c.PostV1ProjectsProjectIdEnvironments(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectIdEnvironmentsResponse(rsp)
}

// GetV1ProjectsProjectIdVariablesWithResponse request returning *GetV1ProjectsProjectIdVariablesResponse
func (c *ClientWithResponses) GetV1ProjectsProjectIdVariablesWithResponse(ctx context.Context, projectId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1ProjectsProjectIdVariablesResponse, error) {
	rsp, err := c.GetV1ProjectsProjectIdVariables(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ProjectsProjectIdVariablesResponse(rsp)
}

// PostV1ProjectsProjectIdVariablesWithBodyWithResponse request with arbitrary body returning *PostV1ProjectsProjectIdVariablesResponse
func (c *ClientWithResponses) PostV1ProjectsProjectIdVariablesWithBodyWithResponse(ctx context.Context, projectId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdVariablesResponse, error) {
	rsp, err := c.PostV1ProjectsProjectIdVariablesWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectIdVariablesResponse(rsp)
}

func (c *ClientWithResponses) PostV1ProjectsProjectIdVariablesWithResponse(ctx context.Context, projectId openapi_types.UUID, body PostV1ProjectsProjectIdVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ProjectsProjectIdVariablesResponse, error) {
	rsp, err := c.PostV1ProjectsProjectIdVariables(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ProjectsProjectIdVariablesResponse(rsp)
}

// ParseGetV1AdminHealthResponse parses an HTTP response from a GetV1AdminHealthWithResponse call
func ParseGetV1AdminHealthResponse(rsp *http.Response) (*GetV1AdminHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AdminHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Status    *string `json:"status,omitempty"`
			Timestamp *string `json:"timestamp,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1ClientsSelfResponse parses an HTTP response from a GetV1ClientsSelfWithResponse call
func ParseGetV1ClientsSelfResponse(rsp *http.Response) (*GetV1ClientsSelfResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ClientsSelfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1ClientsSecretsResponse parses an HTTP response from a GetV1ClientsSecretsWithResponse call
func ParseGetV1ClientsSecretsResponse(rsp *http.Response) (*GetV1ClientsSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ClientsSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Secrets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1EnvironmentsEnvironmentIdSecretsResponse parses an HTTP response from a GetV1EnvironmentsEnvironmentIdSecretsWithResponse call
func ParseGetV1EnvironmentsEnvironmentIdSecretsResponse(rsp *http.Response) (*GetV1EnvironmentsEnvironmentIdSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1EnvironmentsEnvironmentIdSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Secrets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsResponse parses an HTTP response from a GetV1ProjectsWithResponse call
func ParseGetV1ProjectsResponse(rsp *http.Response) (*GetV1ProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Display string `json:"display"`
			Id      string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsResponse parses an HTTP response from a PostV1ProjectsWithResponse call
func ParsePostV1ProjectsResponse(rsp *http.Response) (*PostV1ProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsEnvironmentsEnvironmentIdClientsResponse parses an HTTP response from a PostV1ProjectsEnvironmentsEnvironmentIdClientsWithResponse call
func ParsePostV1ProjectsEnvironmentsEnvironmentIdClientsResponse(rsp *http.Response) (*PostV1ProjectsEnvironmentsEnvironmentIdClientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsEnvironmentsEnvironmentIdClientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateClientResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectIdEnvironmentsResponse parses an HTTP response from a GetV1ProjectsProjectIdEnvironmentsWithResponse call
func ParseGetV1ProjectsProjectIdEnvironmentsResponse(rsp *http.Response) (*GetV1ProjectsProjectIdEnvironmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectIdEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Environments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectIdEnvironmentsResponse parses an HTTP response from a PostV1ProjectsProjectIdEnvironmentsWithResponse call
func ParsePostV1ProjectsProjectIdEnvironmentsResponse(rsp *http.Response) (*PostV1ProjectsProjectIdEnvironmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectIdEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1ProjectsProjectIdVariablesResponse parses an HTTP response from a GetV1ProjectsProjectIdVariablesWithResponse call
func ParseGetV1ProjectsProjectIdVariablesResponse(rsp *http.Response) (*GetV1ProjectsProjectIdVariablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ProjectsProjectIdVariablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Variables
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV1ProjectsProjectIdVariablesResponse parses an HTTP response from a PostV1ProjectsProjectIdVariablesWithResponse call
func ParsePostV1ProjectsProjectIdVariablesResponse(rsp *http.Response) (*PostV1ProjectsProjectIdVariablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ProjectsProjectIdVariablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get health
	// (GET /v1/admin/health)
	GetV1AdminHealth(c *gin.Context)
	// Get self
	// (GET /v1/clients/_self)
	GetV1ClientsSelf(c *gin.Context)
	// Get secrets
	// (GET /v1/clients/secrets)
	GetV1ClientsSecrets(c *gin.Context)
	// List secrets
	// (GET /v1/environments/{environment_id}/secrets)
	GetV1EnvironmentsEnvironmentIdSecrets(c *gin.Context, environmentId openapi_types.UUID)
	// List projects
	// (GET /v1/projects)
	GetV1Projects(c *gin.Context)
	// Create project
	// (POST /v1/projects)
	PostV1Projects(c *gin.Context)
	// Create client
	// (POST /v1/projects/_/environments/{environment_id}/clients)
	PostV1ProjectsEnvironmentsEnvironmentIdClients(c *gin.Context, environmentId openapi_types.UUID)
	// List environments
	// (GET /v1/projects/{project_id}/environments)
	GetV1ProjectsProjectIdEnvironments(c *gin.Context, projectId openapi_types.UUID)
	// Create environment
	// (POST /v1/projects/{project_id}/environments)
	PostV1ProjectsProjectIdEnvironments(c *gin.Context, projectId openapi_types.UUID)
	// Get varibales
	// (GET /v1/projects/{project_id}/variables)
	GetV1ProjectsProjectIdVariables(c *gin.Context, projectId openapi_types.UUID)
	// Create variable
	// (POST /v1/projects/{project_id}/variables)
	PostV1ProjectsProjectIdVariables(c *gin.Context, projectId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetV1AdminHealth operation middleware
func (siw *ServerInterfaceWrapper) GetV1AdminHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1AdminHealth(c)
}

// GetV1ClientsSelf operation middleware
func (siw *ServerInterfaceWrapper) GetV1ClientsSelf(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1ClientsSelf(c)
}

// GetV1ClientsSecrets operation middleware
func (siw *ServerInterfaceWrapper) GetV1ClientsSecrets(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1ClientsSecrets(c)
}

// GetV1EnvironmentsEnvironmentIdSecrets operation middleware
func (siw *ServerInterfaceWrapper) GetV1EnvironmentsEnvironmentIdSecrets(c *gin.Context) {

	var err error

	// ------------- Path parameter "environment_id" -------------
	var environmentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "environment_id", c.Param("environment_id"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environment_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1EnvironmentsEnvironmentIdSecrets(c, environmentId)
}

// GetV1Projects operation middleware
func (siw *ServerInterfaceWrapper) GetV1Projects(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1Projects(c)
}

// PostV1Projects operation middleware
func (siw *ServerInterfaceWrapper) PostV1Projects(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1Projects(c)
}

// PostV1ProjectsEnvironmentsEnvironmentIdClients operation middleware
func (siw *ServerInterfaceWrapper) PostV1ProjectsEnvironmentsEnvironmentIdClients(c *gin.Context) {

	var err error

	// ------------- Path parameter "environment_id" -------------
	var environmentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "environment_id", c.Param("environment_id"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environment_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1ProjectsEnvironmentsEnvironmentIdClients(c, environmentId)
}

// GetV1ProjectsProjectIdEnvironments operation middleware
func (siw *ServerInterfaceWrapper) GetV1ProjectsProjectIdEnvironments(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1ProjectsProjectIdEnvironments(c, projectId)
}

// PostV1ProjectsProjectIdEnvironments operation middleware
func (siw *ServerInterfaceWrapper) PostV1ProjectsProjectIdEnvironments(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1ProjectsProjectIdEnvironments(c, projectId)
}

// GetV1ProjectsProjectIdVariables operation middleware
func (siw *ServerInterfaceWrapper) GetV1ProjectsProjectIdVariables(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1ProjectsProjectIdVariables(c, projectId)
}

// PostV1ProjectsProjectIdVariables operation middleware
func (siw *ServerInterfaceWrapper) PostV1ProjectsProjectIdVariables(c *gin.Context) {

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", c.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1ProjectsProjectIdVariables(c, projectId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/admin/health", wrapper.GetV1AdminHealth)
	router.GET(options.BaseURL+"/v1/clients/_self", wrapper.GetV1ClientsSelf)
	router.GET(options.BaseURL+"/v1/clients/secrets", wrapper.GetV1ClientsSecrets)
	router.GET(options.BaseURL+"/v1/environments/:environment_id/secrets", wrapper.GetV1EnvironmentsEnvironmentIdSecrets)
	router.GET(options.BaseURL+"/v1/projects", wrapper.GetV1Projects)
	router.POST(options.BaseURL+"/v1/projects", wrapper.PostV1Projects)
	router.POST(options.BaseURL+"/v1/projects/_/environments/:environment_id/clients", wrapper.PostV1ProjectsEnvironmentsEnvironmentIdClients)
	router.GET(options.BaseURL+"/v1/projects/:project_id/environments", wrapper.GetV1ProjectsProjectIdEnvironments)
	router.POST(options.BaseURL+"/v1/projects/:project_id/environments", wrapper.PostV1ProjectsProjectIdEnvironments)
	router.GET(options.BaseURL+"/v1/projects/:project_id/variables", wrapper.GetV1ProjectsProjectIdVariables)
	router.POST(options.BaseURL+"/v1/projects/:project_id/variables", wrapper.PostV1ProjectsProjectIdVariables)
}
