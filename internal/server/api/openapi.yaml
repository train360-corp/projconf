openapi: 3.0.0
info:
  title: Secrets API
  version: 1.0.0
tags:
  - name: admin
    description: admin API endpoints
  - name: client
    description: client API endpoints
paths:
  /v1/admin/health:
    get:
      tags:
        - admin
      summary: Get health
      description: Returns a health-check on the server
      responses:
        '200':
          description: client object
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: string
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /v1/clients/_self:
    get:
      tags:
        - client
      summary: Get self
      description: Returns the client object for the currently-authenticated client.
      responses:
        '200':
          description: client object
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  created_at:
                    type: string
                  display:
                    type: string
                  project_id:
                    type: string
                    format: uuid
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /v1/projects:
    get:
      tags:
        - client
        - admin
      summary: List projects
      description: Returns all projects accessible by the client
      responses:
        '200':
          description: A list of projects.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    display:
                      type: string
                  required:
                    - id
                    - display
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }
    post:
      tags:
        - admin
      summary: Create project
      description: Create a new project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: project name (must be unique)
                  pattern: ^[[:alnum:] _]+$
                  minLength: 1
              required:
                - name
      responses:
        '201':
          description: Project Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /v1/projects/{project_id}/environments:
    get:
      tags:
        - client
        - admin
      summary: List environments
      description: Returns all environments for a given project.
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The UUID of the project.
      responses:
        '200':
          description: A list of environments.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Environments"
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }
    post:
      tags:
        - admin
      summary: Create environment
      description: Create a new environment
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The UUID of the project.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: project name (must be unique)
                  pattern: ^[[:alnum:] _]+$
                  minLength: 1
              required:
                - name
      responses:
        '201':
          description: Environment Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /v1/projects/{project_id}/variables:
    get:
      tags:
        - client
        - admin
      summary: Get varibales
      description: Get all variables in a project
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The UUID of the project.
      responses:
        '200':
          description: A list of variables.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Variables"
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }
    post:
      tags:
        - admin
      summary: Create variable
      description: Create a new variable in a project
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The UUID of the project.
      requestBody:
        $ref: '#/components/requestBodies/CreateVariableRequestBody'
      responses:
        '201':
          description: Variable Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /v1/projects/{project_id}/environments/{environment_id}/secrets:
    get:
      tags:
        - client
        - admin
      summary: List secrets
      description: Returns all secrets for a given project environment.
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The UUID of the project.
        - name: environment_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The UUID of the environment.
      responses:
        '200':
          description: A list of secrets.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Secrets"
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '500': { $ref: '#/components/responses/InternalServerError' }

components:

  requestBodies:
    CreateVariableRequestBody:
      required: true
      description: Create Variable Request Body
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  key:
                    type: string
                    description: the key in the environment
                    pattern: ^[A-Z_][A-Z0-9_]*$
                    minLength: 1
                  generator:
                    $ref: '#/components/schemas/SecretGenerator'
                required:
                  - key
                  - generator
  responses:
    BadRequest:
      description: Bad RequestError
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }

  schemas:
    Variables:
      type: array
      items:
        $ref: "#/components/schemas/Variable"
    Variable:
      type: object
      properties:
        description: { type: string }
        generator_data:
          description: arbitrary generator data payload, based on type
          oneOf:
            - type: object
            - type: string
            - type: number
            - type: boolean
            - type: array
              items: {}
        generator_type: { $ref: '#/components/schemas/GeneratorType' }
        id:
          type: string
          format: uuid
        key: { type: string }
        project_id:
          type: string
          format: uuid
      required:
        - description
        - generator_data
        - generator_type
        - id
        - key
        - project_id
    Environments:
      type: array
      items:
        $ref: "#/components/schemas/Environment"
    Environment:
      type: object
      properties:
        id:
          type: string
        display:
          type: string
      required:
        - id
        - display
    Secrets:
      type: array
      items:
        $ref: "#/components/schemas/Secret"
    Secret:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
      required:
        - key
        - value
    ID:
      type: object
      properties:
        id:
          type: string
          format: uuid
      required:
        - id
    Error:
      type: object
      properties:
        error:
          type: string
        description:
          type: string
      required:
        - error
        - description
    ##############################
    #     SECRETS GENERATORS     #
    ##############################
    GeneratorType:
      type: string
      enum:
        - STATIC
        - RANDOM
    StaticGeneratorData:
      type: string
    RandomGeneratorData:
      type: object
      properties:
        length:
          type: number
          minimum: 1
        letters:
          type: boolean
        numbers:
          type: boolean
        symbols:
          type: boolean
      required:
        - length
        - letters
        - numbers
        - symbols
    # Base (optional, for reuse)
    SecretGeneratorBase:
      type: object
      required: [ type, data ]
      properties:
        type:
          $ref: '#/components/schemas/GeneratorType'
        data: { }  # overridden in subtypes
    # Concrete variants
    SecretGeneratorStatic:
      allOf:
        - $ref: '#/components/schemas/SecretGeneratorBase'
        - type: object
          properties:
            type:
              type: string
              enum: [ STATIC ]
            data:
              $ref: '#/components/schemas/StaticGeneratorData'
    SecretGeneratorRandom:
      allOf:
        - $ref: '#/components/schemas/SecretGeneratorBase'
        - type: object
          properties:
            type:
              type: string
              enum: [ RANDOM ]
            data:
              $ref: '#/components/schemas/RandomGeneratorData'
    # Polymorphic entry point
    SecretGenerator:
      oneOf:
        - $ref: '#/components/schemas/SecretGeneratorStatic'
        - $ref: '#/components/schemas/SecretGeneratorRandom'
      discriminator:
        propertyName: type
        mapping:
          STATIC: '#/components/schemas/SecretGeneratorStatic'
          RANDOM: '#/components/schemas/SecretGeneratorRandom'