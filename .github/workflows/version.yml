on:
  push:
    paths:
      - 'version.json'
      - '.github/workflows/version.yml'

permissions:
  contents: write

jobs:
  version:
    uses: train360-corp/actions/.github/workflows/version-check.yml@main
    with:
      file-name: version.json
      json-version-path: .version
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}

  tag:
    runs-on: ubuntu-24.04
    needs:
      - version
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # important so tags/history are available

      - name: Create tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "v${{ needs.version.outputs.version }}" -m "Release v${{ needs.version.outputs.version }}"
          git push origin "v${{ needs.version.outputs.version }}"

  build:
    needs:
      - tag
      - version
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        id: goreleaser
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean --skip=validate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HOMEBREW_TAP_REPO_SECRET: ${{ secrets.HOMEBREW_TAP_REPO_SECRET }}

      #####################################
      #     RELEASE TO PPA REPOSITORY     #
      #####################################

      - name: Extract Linux Package Artifacts
        id: extract
        run: |
          echo "linux_packages=$(echo '${{ steps.goreleaser.outputs.artifacts }}' | jq -c '[.[] | select(.type == "Linux Package")]')" >> "$GITHUB_OUTPUT"

      - name: Checkout PPA repository
        uses: actions/checkout@v4
        with:
          repository: train360-corp/ppa
          token: ${{ secrets.PPA_TOKEN }}
          path: ppa-repo

      - name: Ensure packages folder exists and copy Linux packages
        env:
          KEY: ${{ secrets.PPA_SIGNING_KEY }}
        run: |
          mkdir -p ppa-repo/packages
          packages=$(echo '${{ steps.extract.outputs.linux_packages }}' | jq -r '.[] | @base64')

          for pkg in $packages; do
            _jq() {
              echo "$pkg" | base64 --decode | jq -r "$1"
            }

            path=$(_jq '.path')
            name=$(_jq '.name')

            src_path="./$path"
            dest_path="ppa-repo/packages/$name"

            echo "Copying $src_path to $dest_path"
            cp "$src_path" "$dest_path"
          done
          
          # update the PPA Repo packages list
          ./ppa-repo/update.sh
          

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          token: ${{ secrets.PPA_TOKEN }}
          path: ppa-repo
          title: 'feat: add ProjConf release ${{ needs.version.outputs.version }}'
          body: |
            This PR adds the Linux packages for `projconf` version `${{ needs.version.outputs.version }}` generated by GoReleaser.
            
            Triggered by commit: ${{ github.sha }}
          branch: 'projconf-${{ needs.version.outputs.version }}'
          base: 'main'
          commit-message: 'feat: add ProjConf Linux packages for ${{ needs.version.outputs.version }}'
          draft: false